/*
 * This file is automatically generated.
 */
#ifndef aw_gl_ext_opengl_4_5_h
#define aw_gl_ext_opengl_4_5_h
#include "gl_ext33.h"
#include "gl_ext_enum45.h"

namespace aw {
namespace gl {
namespace sys {
ext::load_result load_functions_4_1();
ext::load_result load_functions_4_5();
} //namespace sys

namespace _impl {
/* gl version 1.0 */
extern void (AWGL_API* GetPointerv)(GLenum pname, void ** params);

/* gl version 4.0 */
extern void (AWGL_API* BeginQueryIndexed)(GLenum target, GLuint index, GLuint id);
extern void (AWGL_API* BindTransformFeedback)(GLenum target, GLuint id);
extern void (AWGL_API* BlendEquationSeparatei)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
extern void (AWGL_API* BlendEquationi)(GLuint buf, GLenum mode);
extern void (AWGL_API* BlendFuncSeparatei)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
extern void (AWGL_API* BlendFunci)(GLuint buf, GLenum src, GLenum dst);
extern void (AWGL_API* DeleteTransformFeedbacks)(GLsizei n, const GLuint * ids);
extern void (AWGL_API* DrawArraysIndirect)(GLenum mode, const void * indirect);
extern void (AWGL_API* DrawElementsIndirect)(GLenum mode, GLenum type, const void * indirect);
extern void (AWGL_API* DrawTransformFeedback)(GLenum mode, GLuint id);
extern void (AWGL_API* DrawTransformFeedbackStream)(GLenum mode, GLuint id, GLuint stream);
extern void (AWGL_API* EndQueryIndexed)(GLenum target, GLuint index);
extern void (AWGL_API* GenTransformFeedbacks)(GLsizei n, GLuint * ids);
extern void (AWGL_API* GetActiveSubroutineName)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name);
extern void (AWGL_API* GetActiveSubroutineUniformName)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name);
extern void (AWGL_API* GetActiveSubroutineUniformiv)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values);
extern void (AWGL_API* GetProgramStageiv)(GLuint program, GLenum shadertype, GLenum pname, GLint * values);
extern void (AWGL_API* GetQueryIndexediv)(GLenum target, GLuint index, GLenum pname, GLint * params);
extern GLuint (AWGL_API* GetSubroutineIndex)(GLuint program, GLenum shadertype, const GLchar * name);
extern GLint (AWGL_API* GetSubroutineUniformLocation)(GLuint program, GLenum shadertype, const GLchar * name);
extern void (AWGL_API* GetUniformSubroutineuiv)(GLenum shadertype, GLint location, GLuint * params);
extern void (AWGL_API* GetUniformdv)(GLuint program, GLint location, GLdouble * params);
extern GLboolean (AWGL_API* IsTransformFeedback)(GLuint id);
extern void (AWGL_API* MinSampleShading)(GLfloat value);
extern void (AWGL_API* PatchParameterfv)(GLenum pname, const GLfloat * values);
extern void (AWGL_API* PatchParameteri)(GLenum pname, GLint value);
extern void (AWGL_API* PauseTransformFeedback)(void);
extern void (AWGL_API* ResumeTransformFeedback)(void);
extern void (AWGL_API* Uniform1d)(GLint location, GLdouble x);
extern void (AWGL_API* Uniform1dv)(GLint location, GLsizei count, const GLdouble * value);
extern void (AWGL_API* Uniform2d)(GLint location, GLdouble x, GLdouble y);
extern void (AWGL_API* Uniform2dv)(GLint location, GLsizei count, const GLdouble * value);
extern void (AWGL_API* Uniform3d)(GLint location, GLdouble x, GLdouble y, GLdouble z);
extern void (AWGL_API* Uniform3dv)(GLint location, GLsizei count, const GLdouble * value);
extern void (AWGL_API* Uniform4d)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern void (AWGL_API* Uniform4dv)(GLint location, GLsizei count, const GLdouble * value);
extern void (AWGL_API* UniformMatrix2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* UniformMatrix2x3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* UniformMatrix2x4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* UniformMatrix3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* UniformMatrix3x2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* UniformMatrix3x4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* UniformMatrix4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* UniformMatrix4x2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* UniformMatrix4x3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* UniformSubroutinesuiv)(GLenum shadertype, GLsizei count, const GLuint * indices);

/* gl version 4.1 */
extern void (AWGL_API* ActiveShaderProgram)(GLuint pipeline, GLuint program);
extern void (AWGL_API* BindProgramPipeline)(GLuint pipeline);
extern void (AWGL_API* ClearDepthf)(GLfloat d);
extern GLuint (AWGL_API* CreateShaderProgramv)(GLenum type, GLsizei count, const GLchar *const* strings);
extern void (AWGL_API* DeleteProgramPipelines)(GLsizei n, const GLuint * pipelines);
extern void (AWGL_API* DepthRangeArrayv)(GLuint first, GLsizei count, const GLdouble * v);
extern void (AWGL_API* DepthRangeIndexed)(GLuint index, GLdouble n, GLdouble f);
extern void (AWGL_API* DepthRangef)(GLfloat n, GLfloat f);
extern void (AWGL_API* GenProgramPipelines)(GLsizei n, GLuint * pipelines);
extern void (AWGL_API* GetDoublei_v)(GLenum target, GLuint index, GLdouble * data);
extern void (AWGL_API* GetFloati_v)(GLenum target, GLuint index, GLfloat * data);
extern void (AWGL_API* GetProgramBinary)(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary);
extern void (AWGL_API* GetProgramPipelineInfoLog)(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
extern void (AWGL_API* GetProgramPipelineiv)(GLuint pipeline, GLenum pname, GLint * params);
extern void (AWGL_API* GetShaderPrecisionFormat)(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision);
extern void (AWGL_API* GetVertexAttribLdv)(GLuint index, GLenum pname, GLdouble * params);
extern GLboolean (AWGL_API* IsProgramPipeline)(GLuint pipeline);
extern void (AWGL_API* ProgramBinary)(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length);
extern void (AWGL_API* ProgramParameteri)(GLuint program, GLenum pname, GLint value);
extern void (AWGL_API* ProgramUniform1d)(GLuint program, GLint location, GLdouble v0);
extern void (AWGL_API* ProgramUniform1dv)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
extern void (AWGL_API* ProgramUniform1f)(GLuint program, GLint location, GLfloat v0);
extern void (AWGL_API* ProgramUniform1fv)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
extern void (AWGL_API* ProgramUniform1i)(GLuint program, GLint location, GLint v0);
extern void (AWGL_API* ProgramUniform1iv)(GLuint program, GLint location, GLsizei count, const GLint * value);
extern void (AWGL_API* ProgramUniform1ui)(GLuint program, GLint location, GLuint v0);
extern void (AWGL_API* ProgramUniform1uiv)(GLuint program, GLint location, GLsizei count, const GLuint * value);
extern void (AWGL_API* ProgramUniform2d)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
extern void (AWGL_API* ProgramUniform2dv)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
extern void (AWGL_API* ProgramUniform2f)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
extern void (AWGL_API* ProgramUniform2fv)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
extern void (AWGL_API* ProgramUniform2i)(GLuint program, GLint location, GLint v0, GLint v1);
extern void (AWGL_API* ProgramUniform2iv)(GLuint program, GLint location, GLsizei count, const GLint * value);
extern void (AWGL_API* ProgramUniform2ui)(GLuint program, GLint location, GLuint v0, GLuint v1);
extern void (AWGL_API* ProgramUniform2uiv)(GLuint program, GLint location, GLsizei count, const GLuint * value);
extern void (AWGL_API* ProgramUniform3d)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
extern void (AWGL_API* ProgramUniform3dv)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
extern void (AWGL_API* ProgramUniform3f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
extern void (AWGL_API* ProgramUniform3fv)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
extern void (AWGL_API* ProgramUniform3i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
extern void (AWGL_API* ProgramUniform3iv)(GLuint program, GLint location, GLsizei count, const GLint * value);
extern void (AWGL_API* ProgramUniform3ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
extern void (AWGL_API* ProgramUniform3uiv)(GLuint program, GLint location, GLsizei count, const GLuint * value);
extern void (AWGL_API* ProgramUniform4d)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
extern void (AWGL_API* ProgramUniform4dv)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
extern void (AWGL_API* ProgramUniform4f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
extern void (AWGL_API* ProgramUniform4fv)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
extern void (AWGL_API* ProgramUniform4i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
extern void (AWGL_API* ProgramUniform4iv)(GLuint program, GLint location, GLsizei count, const GLint * value);
extern void (AWGL_API* ProgramUniform4ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
extern void (AWGL_API* ProgramUniform4uiv)(GLuint program, GLint location, GLsizei count, const GLuint * value);
extern void (AWGL_API* ProgramUniformMatrix2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* ProgramUniformMatrix2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern void (AWGL_API* ProgramUniformMatrix2x3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* ProgramUniformMatrix2x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern void (AWGL_API* ProgramUniformMatrix2x4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* ProgramUniformMatrix2x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern void (AWGL_API* ProgramUniformMatrix3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* ProgramUniformMatrix3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern void (AWGL_API* ProgramUniformMatrix3x2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* ProgramUniformMatrix3x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern void (AWGL_API* ProgramUniformMatrix3x4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* ProgramUniformMatrix3x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern void (AWGL_API* ProgramUniformMatrix4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* ProgramUniformMatrix4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern void (AWGL_API* ProgramUniformMatrix4x2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* ProgramUniformMatrix4x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern void (AWGL_API* ProgramUniformMatrix4x3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* ProgramUniformMatrix4x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern void (AWGL_API* ReleaseShaderCompiler)(void);
extern void (AWGL_API* ScissorArrayv)(GLuint first, GLsizei count, const GLint * v);
extern void (AWGL_API* ScissorIndexed)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
extern void (AWGL_API* ScissorIndexedv)(GLuint index, const GLint * v);
extern void (AWGL_API* ShaderBinary)(GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length);
extern void (AWGL_API* UseProgramStages)(GLuint pipeline, GLbitfield stages, GLuint program);
extern void (AWGL_API* ValidateProgramPipeline)(GLuint pipeline);
extern void (AWGL_API* VertexAttribL1d)(GLuint index, GLdouble x);
extern void (AWGL_API* VertexAttribL1dv)(GLuint index, const GLdouble * v);
extern void (AWGL_API* VertexAttribL2d)(GLuint index, GLdouble x, GLdouble y);
extern void (AWGL_API* VertexAttribL2dv)(GLuint index, const GLdouble * v);
extern void (AWGL_API* VertexAttribL3d)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
extern void (AWGL_API* VertexAttribL3dv)(GLuint index, const GLdouble * v);
extern void (AWGL_API* VertexAttribL4d)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern void (AWGL_API* VertexAttribL4dv)(GLuint index, const GLdouble * v);
extern void (AWGL_API* VertexAttribLPointer)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
extern void (AWGL_API* ViewportArrayv)(GLuint first, GLsizei count, const GLfloat * v);
extern void (AWGL_API* ViewportIndexedf)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
extern void (AWGL_API* ViewportIndexedfv)(GLuint index, const GLfloat * v);

/* gl version 4.2 */
extern void (AWGL_API* BindImageTexture)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
extern void (AWGL_API* DrawArraysInstancedBaseInstance)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
extern void (AWGL_API* DrawElementsInstancedBaseInstance)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance);
extern void (AWGL_API* DrawElementsInstancedBaseVertexBaseInstance)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
extern void (AWGL_API* DrawTransformFeedbackInstanced)(GLenum mode, GLuint id, GLsizei instancecount);
extern void (AWGL_API* DrawTransformFeedbackStreamInstanced)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
extern void (AWGL_API* GetActiveAtomicCounterBufferiv)(GLuint program, GLuint bufferIndex, GLenum pname, GLint * params);
extern void (AWGL_API* GetInternalformativ)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint * params);
extern void (AWGL_API* MemoryBarrier)(GLbitfield barriers);
extern void (AWGL_API* TexStorage1D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
extern void (AWGL_API* TexStorage2D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
extern void (AWGL_API* TexStorage3D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);

/* gl version 4.3 */
extern void (AWGL_API* BindVertexBuffer)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
extern void (AWGL_API* ClearBufferData)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data);
extern void (AWGL_API* ClearBufferSubData)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
extern void (AWGL_API* CopyImageSubData)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
extern void (AWGL_API* DebugMessageCallback)(GLDEBUGPROC callback, const void * userParam);
extern void (AWGL_API* DebugMessageControl)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
extern void (AWGL_API* DebugMessageInsert)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf);
extern void (AWGL_API* DispatchCompute)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
extern void (AWGL_API* DispatchComputeIndirect)(GLintptr indirect);
extern void (AWGL_API* FramebufferParameteri)(GLenum target, GLenum pname, GLint param);
extern GLuint (AWGL_API* GetDebugMessageLog)(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
extern void (AWGL_API* GetFramebufferParameteriv)(GLenum target, GLenum pname, GLint * params);
extern void (AWGL_API* GetInternalformati64v)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 * params);
extern void (AWGL_API* GetObjectLabel)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label);
extern void (AWGL_API* GetObjectPtrLabel)(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label);
extern void (AWGL_API* GetProgramInterfaceiv)(GLuint program, GLenum programInterface, GLenum pname, GLint * params);
extern GLuint (AWGL_API* GetProgramResourceIndex)(GLuint program, GLenum programInterface, const GLchar * name);
extern GLint (AWGL_API* GetProgramResourceLocation)(GLuint program, GLenum programInterface, const GLchar * name);
extern GLint (AWGL_API* GetProgramResourceLocationIndex)(GLuint program, GLenum programInterface, const GLchar * name);
extern void (AWGL_API* GetProgramResourceName)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
extern void (AWGL_API* GetProgramResourceiv)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params);
extern void (AWGL_API* InvalidateBufferData)(GLuint buffer);
extern void (AWGL_API* InvalidateBufferSubData)(GLuint buffer, GLintptr offset, GLsizeiptr length);
extern void (AWGL_API* InvalidateFramebuffer)(GLenum target, GLsizei numAttachments, const GLenum * attachments);
extern void (AWGL_API* InvalidateSubFramebuffer)(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
extern void (AWGL_API* InvalidateTexImage)(GLuint texture, GLint level);
extern void (AWGL_API* InvalidateTexSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
extern void (AWGL_API* MultiDrawArraysIndirect)(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride);
extern void (AWGL_API* MultiDrawElementsIndirect)(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride);
extern void (AWGL_API* ObjectLabel)(GLenum identifier, GLuint name, GLsizei length, const GLchar * label);
extern void (AWGL_API* ObjectPtrLabel)(const void * ptr, GLsizei length, const GLchar * label);
extern void (AWGL_API* PopDebugGroup)(void);
extern void (AWGL_API* PushDebugGroup)(GLenum source, GLuint id, GLsizei length, const GLchar * message);
extern void (AWGL_API* ShaderStorageBlockBinding)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
extern void (AWGL_API* TexBufferRange)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
extern void (AWGL_API* TexStorage2DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
extern void (AWGL_API* TexStorage3DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
extern void (AWGL_API* TextureView)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
extern void (AWGL_API* VertexAttribBinding)(GLuint attribindex, GLuint bindingindex);
extern void (AWGL_API* VertexAttribFormat)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
extern void (AWGL_API* VertexAttribIFormat)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
extern void (AWGL_API* VertexAttribLFormat)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
extern void (AWGL_API* VertexBindingDivisor)(GLuint bindingindex, GLuint divisor);

/* gl version 4.4 */
extern void (AWGL_API* BindBuffersBase)(GLenum target, GLuint first, GLsizei count, const GLuint * buffers);
extern void (AWGL_API* BindBuffersRange)(GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes);
extern void (AWGL_API* BindImageTextures)(GLuint first, GLsizei count, const GLuint * textures);
extern void (AWGL_API* BindSamplers)(GLuint first, GLsizei count, const GLuint * samplers);
extern void (AWGL_API* BindTextures)(GLuint first, GLsizei count, const GLuint * textures);
extern void (AWGL_API* BindVertexBuffers)(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);
extern void (AWGL_API* BufferStorage)(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags);
extern void (AWGL_API* ClearTexImage)(GLuint texture, GLint level, GLenum format, GLenum type, const void * data);
extern void (AWGL_API* ClearTexSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data);

/* gl version 4.5 */
extern void (AWGL_API* BindTextureUnit)(GLuint unit, GLuint texture);
extern void (AWGL_API* BlitNamedFramebuffer)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
extern GLenum (AWGL_API* CheckNamedFramebufferStatus)(GLuint framebuffer, GLenum target);
extern void (AWGL_API* ClearNamedBufferData)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data);
extern void (AWGL_API* ClearNamedBufferSubData)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
extern void (AWGL_API* ClearNamedFramebufferfi)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat depth, GLint stencil);
extern void (AWGL_API* ClearNamedFramebufferfv)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value);
extern void (AWGL_API* ClearNamedFramebufferiv)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value);
extern void (AWGL_API* ClearNamedFramebufferuiv)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value);
extern void (AWGL_API* ClipControl)(GLenum origin, GLenum depth);
extern void (AWGL_API* CompressedTextureSubImage1D)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
extern void (AWGL_API* CompressedTextureSubImage2D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
extern void (AWGL_API* CompressedTextureSubImage3D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
extern void (AWGL_API* CopyNamedBufferSubData)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
extern void (AWGL_API* CopyTextureSubImage1D)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
extern void (AWGL_API* CopyTextureSubImage2D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern void (AWGL_API* CopyTextureSubImage3D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern void (AWGL_API* CreateBuffers)(GLsizei n, GLuint * buffers);
extern void (AWGL_API* CreateFramebuffers)(GLsizei n, GLuint * framebuffers);
extern void (AWGL_API* CreateProgramPipelines)(GLsizei n, GLuint * pipelines);
extern void (AWGL_API* CreateQueries)(GLenum target, GLsizei n, GLuint * ids);
extern void (AWGL_API* CreateRenderbuffers)(GLsizei n, GLuint * renderbuffers);
extern void (AWGL_API* CreateSamplers)(GLsizei n, GLuint * samplers);
extern void (AWGL_API* CreateTextures)(GLenum target, GLsizei n, GLuint * textures);
extern void (AWGL_API* CreateTransformFeedbacks)(GLsizei n, GLuint * ids);
extern void (AWGL_API* CreateVertexArrays)(GLsizei n, GLuint * arrays);
extern void (AWGL_API* DisableVertexArrayAttrib)(GLuint vaobj, GLuint index);
extern void (AWGL_API* EnableVertexArrayAttrib)(GLuint vaobj, GLuint index);
extern void (AWGL_API* FlushMappedNamedBufferRange)(GLuint buffer, GLintptr offset, GLsizeiptr length);
extern void (AWGL_API* GenerateTextureMipmap)(GLuint texture);
extern void (AWGL_API* GetCompressedTextureImage)(GLuint texture, GLint level, GLsizei bufSize, void * pixels);
extern void (AWGL_API* GetCompressedTextureSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels);
extern GLenum (AWGL_API* GetGraphicsResetStatus)(void);
extern void (AWGL_API* GetNamedBufferParameteri64v)(GLuint buffer, GLenum pname, GLint64 * params);
extern void (AWGL_API* GetNamedBufferParameteriv)(GLuint buffer, GLenum pname, GLint * params);
extern void (AWGL_API* GetNamedBufferPointerv)(GLuint buffer, GLenum pname, void ** params);
extern void (AWGL_API* GetNamedBufferSubData)(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data);
extern void (AWGL_API* GetNamedFramebufferAttachmentParameteriv)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params);
extern void (AWGL_API* GetNamedFramebufferParameteriv)(GLuint framebuffer, GLenum pname, GLint * param);
extern void (AWGL_API* GetNamedRenderbufferParameteriv)(GLuint renderbuffer, GLenum pname, GLint * params);
extern void (AWGL_API* GetQueryBufferObjecti64v)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
extern void (AWGL_API* GetQueryBufferObjectiv)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
extern void (AWGL_API* GetQueryBufferObjectui64v)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
extern void (AWGL_API* GetQueryBufferObjectuiv)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
extern void (AWGL_API* GetTextureImage)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
extern void (AWGL_API* GetTextureLevelParameterfv)(GLuint texture, GLint level, GLenum pname, GLfloat * params);
extern void (AWGL_API* GetTextureLevelParameteriv)(GLuint texture, GLint level, GLenum pname, GLint * params);
extern void (AWGL_API* GetTextureParameterIiv)(GLuint texture, GLenum pname, GLint * params);
extern void (AWGL_API* GetTextureParameterIuiv)(GLuint texture, GLenum pname, GLuint * params);
extern void (AWGL_API* GetTextureParameterfv)(GLuint texture, GLenum pname, GLfloat * params);
extern void (AWGL_API* GetTextureParameteriv)(GLuint texture, GLenum pname, GLint * params);
extern void (AWGL_API* GetTextureSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
extern void (AWGL_API* GetTransformFeedbacki64_v)(GLuint xfb, GLenum pname, GLuint index, GLint64 * param);
extern void (AWGL_API* GetTransformFeedbacki_v)(GLuint xfb, GLenum pname, GLuint index, GLint * param);
extern void (AWGL_API* GetTransformFeedbackiv)(GLuint xfb, GLenum pname, GLint * param);
extern void (AWGL_API* GetVertexArrayIndexed64iv)(GLuint vaobj, GLuint index, GLenum pname, GLint64 * param);
extern void (AWGL_API* GetVertexArrayIndexediv)(GLuint vaobj, GLuint index, GLenum pname, GLint * param);
extern void (AWGL_API* GetVertexArrayiv)(GLuint vaobj, GLenum pname, GLint * param);
extern void (AWGL_API* GetnCompressedTexImage)(GLenum target, GLint lod, GLsizei bufSize, void * pixels);
extern void (AWGL_API* GetnTexImage)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
extern void (AWGL_API* GetnUniformdv)(GLuint program, GLint location, GLsizei bufSize, GLdouble * params);
extern void (AWGL_API* GetnUniformfv)(GLuint program, GLint location, GLsizei bufSize, GLfloat * params);
extern void (AWGL_API* GetnUniformiv)(GLuint program, GLint location, GLsizei bufSize, GLint * params);
extern void (AWGL_API* GetnUniformuiv)(GLuint program, GLint location, GLsizei bufSize, GLuint * params);
extern void (AWGL_API* InvalidateNamedFramebufferData)(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments);
extern void (AWGL_API* InvalidateNamedFramebufferSubData)(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
extern void * (AWGL_API* MapNamedBuffer)(GLuint buffer, GLenum access);
extern void * (AWGL_API* MapNamedBufferRange)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
extern void (AWGL_API* MemoryBarrierByRegion)(GLbitfield barriers);
extern void (AWGL_API* NamedBufferData)(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage);
extern void (AWGL_API* NamedBufferStorage)(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags);
extern void (AWGL_API* NamedBufferSubData)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data);
extern void (AWGL_API* NamedFramebufferDrawBuffer)(GLuint framebuffer, GLenum buf);
extern void (AWGL_API* NamedFramebufferDrawBuffers)(GLuint framebuffer, GLsizei n, const GLenum * bufs);
extern void (AWGL_API* NamedFramebufferParameteri)(GLuint framebuffer, GLenum pname, GLint param);
extern void (AWGL_API* NamedFramebufferReadBuffer)(GLuint framebuffer, GLenum src);
extern void (AWGL_API* NamedFramebufferRenderbuffer)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
extern void (AWGL_API* NamedFramebufferTexture)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
extern void (AWGL_API* NamedFramebufferTextureLayer)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
extern void (AWGL_API* NamedRenderbufferStorage)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
extern void (AWGL_API* NamedRenderbufferStorageMultisample)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
extern void (AWGL_API* ReadnPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data);
extern void (AWGL_API* TextureBarrier)(void);
extern void (AWGL_API* TextureBuffer)(GLuint texture, GLenum internalformat, GLuint buffer);
extern void (AWGL_API* TextureBufferRange)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
extern void (AWGL_API* TextureParameterIiv)(GLuint texture, GLenum pname, const GLint * params);
extern void (AWGL_API* TextureParameterIuiv)(GLuint texture, GLenum pname, const GLuint * params);
extern void (AWGL_API* TextureParameterf)(GLuint texture, GLenum pname, GLfloat param);
extern void (AWGL_API* TextureParameterfv)(GLuint texture, GLenum pname, const GLfloat * param);
extern void (AWGL_API* TextureParameteri)(GLuint texture, GLenum pname, GLint param);
extern void (AWGL_API* TextureParameteriv)(GLuint texture, GLenum pname, const GLint * param);
extern void (AWGL_API* TextureStorage1D)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
extern void (AWGL_API* TextureStorage2D)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
extern void (AWGL_API* TextureStorage2DMultisample)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
extern void (AWGL_API* TextureStorage3D)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
extern void (AWGL_API* TextureStorage3DMultisample)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
extern void (AWGL_API* TextureSubImage1D)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
extern void (AWGL_API* TextureSubImage2D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
extern void (AWGL_API* TextureSubImage3D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
extern void (AWGL_API* TransformFeedbackBufferBase)(GLuint xfb, GLuint index, GLuint buffer);
extern void (AWGL_API* TransformFeedbackBufferRange)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
extern GLboolean (AWGL_API* UnmapNamedBuffer)(GLuint buffer);
extern void (AWGL_API* VertexArrayAttribBinding)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
extern void (AWGL_API* VertexArrayAttribFormat)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
extern void (AWGL_API* VertexArrayAttribIFormat)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
extern void (AWGL_API* VertexArrayAttribLFormat)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
extern void (AWGL_API* VertexArrayBindingDivisor)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
extern void (AWGL_API* VertexArrayElementBuffer)(GLuint vaobj, GLuint buffer);
extern void (AWGL_API* VertexArrayVertexBuffer)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
extern void (AWGL_API* VertexArrayVertexBuffers)(GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);
} //namespace _impl

/* gl version 1.0 */
inline void get_pointerv(GLenum pname, void ** params)
{
	_impl::GetPointerv(pname, params);
}

/* gl version 4.0 */
inline void begin_query_indexed(GLenum target, GLuint index, GLuint id)
{
	_impl::BeginQueryIndexed(target, index, id);
}
inline void bind_transform_feedback(GLenum target, GLuint id)
{
	_impl::BindTransformFeedback(target, id);
}
inline void blend_equation_separatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
	_impl::BlendEquationSeparatei(buf, modeRGB, modeAlpha);
}
inline void blend_equationi(GLuint buf, GLenum mode)
{
	_impl::BlendEquationi(buf, mode);
}
inline void blend_func_separatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
	_impl::BlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}
inline void blend_funci(GLuint buf, GLenum src, GLenum dst)
{
	_impl::BlendFunci(buf, src, dst);
}
inline void delete_transform_feedbacks(GLsizei n, const GLuint * ids)
{
	_impl::DeleteTransformFeedbacks(n, ids);
}
inline void draw_arrays_indirect(GLenum mode, const void * indirect)
{
	_impl::DrawArraysIndirect(mode, indirect);
}
inline void draw_elements_indirect(GLenum mode, GLenum type, const void * indirect)
{
	_impl::DrawElementsIndirect(mode, type, indirect);
}
inline void draw_transform_feedback(GLenum mode, GLuint id)
{
	_impl::DrawTransformFeedback(mode, id);
}
inline void draw_transform_feedback_stream(GLenum mode, GLuint id, GLuint stream)
{
	_impl::DrawTransformFeedbackStream(mode, id, stream);
}
inline void end_query_indexed(GLenum target, GLuint index)
{
	_impl::EndQueryIndexed(target, index);
}
inline void gen_transform_feedbacks(GLsizei n, GLuint * ids)
{
	_impl::GenTransformFeedbacks(n, ids);
}
inline void get_active_subroutine_name(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name)
{
	_impl::GetActiveSubroutineName(program, shadertype, index, bufsize, length, name);
}
inline void get_active_subroutine_uniform_name(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name)
{
	_impl::GetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name);
}
inline void get_active_subroutine_uniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values)
{
	_impl::GetActiveSubroutineUniformiv(program, shadertype, index, pname, values);
}
inline void get_program_stageiv(GLuint program, GLenum shadertype, GLenum pname, GLint * values)
{
	_impl::GetProgramStageiv(program, shadertype, pname, values);
}
inline void get_query_indexediv(GLenum target, GLuint index, GLenum pname, GLint * params)
{
	_impl::GetQueryIndexediv(target, index, pname, params);
}
inline GLuint get_subroutine_index(GLuint program, GLenum shadertype, const GLchar * name)
{
	return _impl::GetSubroutineIndex(program, shadertype, name);
}
inline GLint get_subroutine_uniform_location(GLuint program, GLenum shadertype, const GLchar * name)
{
	return _impl::GetSubroutineUniformLocation(program, shadertype, name);
}
inline void get_uniform_subroutineuiv(GLenum shadertype, GLint location, GLuint * params)
{
	_impl::GetUniformSubroutineuiv(shadertype, location, params);
}
inline void get_uniformdv(GLuint program, GLint location, GLdouble * params)
{
	_impl::GetUniformdv(program, location, params);
}
inline GLboolean is_transform_feedback(GLuint id)
{
	return _impl::IsTransformFeedback(id);
}
inline void min_sample_shading(GLfloat value)
{
	_impl::MinSampleShading(value);
}
inline void patch_parameterfv(GLenum pname, const GLfloat * values)
{
	_impl::PatchParameterfv(pname, values);
}
inline void patch_parameteri(GLenum pname, GLint value)
{
	_impl::PatchParameteri(pname, value);
}
inline void pause_transform_feedback(void)
{
	_impl::PauseTransformFeedback();
}
inline void resume_transform_feedback(void)
{
	_impl::ResumeTransformFeedback();
}
inline void uniform1d(GLint location, GLdouble x)
{
	_impl::Uniform1d(location, x);
}
inline void uniform1dv(GLint location, GLsizei count, const GLdouble * value)
{
	_impl::Uniform1dv(location, count, value);
}
inline void uniform2d(GLint location, GLdouble x, GLdouble y)
{
	_impl::Uniform2d(location, x, y);
}
inline void uniform2dv(GLint location, GLsizei count, const GLdouble * value)
{
	_impl::Uniform2dv(location, count, value);
}
inline void uniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z)
{
	_impl::Uniform3d(location, x, y, z);
}
inline void uniform3dv(GLint location, GLsizei count, const GLdouble * value)
{
	_impl::Uniform3dv(location, count, value);
}
inline void uniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
	_impl::Uniform4d(location, x, y, z, w);
}
inline void uniform4dv(GLint location, GLsizei count, const GLdouble * value)
{
	_impl::Uniform4dv(location, count, value);
}
inline void uniform_matrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::UniformMatrix2dv(location, count, transpose, value);
}
inline void uniform_matrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::UniformMatrix2x3dv(location, count, transpose, value);
}
inline void uniform_matrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::UniformMatrix2x4dv(location, count, transpose, value);
}
inline void uniform_matrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::UniformMatrix3dv(location, count, transpose, value);
}
inline void uniform_matrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::UniformMatrix3x2dv(location, count, transpose, value);
}
inline void uniform_matrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::UniformMatrix3x4dv(location, count, transpose, value);
}
inline void uniform_matrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::UniformMatrix4dv(location, count, transpose, value);
}
inline void uniform_matrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::UniformMatrix4x2dv(location, count, transpose, value);
}
inline void uniform_matrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::UniformMatrix4x3dv(location, count, transpose, value);
}
inline void uniform_subroutinesuiv(GLenum shadertype, GLsizei count, const GLuint * indices)
{
	_impl::UniformSubroutinesuiv(shadertype, count, indices);
}

/* gl version 4.1 */
inline void active_shader_program(GLuint pipeline, GLuint program)
{
	_impl::ActiveShaderProgram(pipeline, program);
}
inline void bind_program_pipeline(GLuint pipeline)
{
	_impl::BindProgramPipeline(pipeline);
}
inline void clear_depthf(GLfloat d)
{
	_impl::ClearDepthf(d);
}
inline GLuint create_shader_programv(GLenum type, GLsizei count, const GLchar *const* strings)
{
	return _impl::CreateShaderProgramv(type, count, strings);
}
inline void delete_program_pipelines(GLsizei n, const GLuint * pipelines)
{
	_impl::DeleteProgramPipelines(n, pipelines);
}
inline void depth_range_arrayv(GLuint first, GLsizei count, const GLdouble * v)
{
	_impl::DepthRangeArrayv(first, count, v);
}
inline void depth_range_indexed(GLuint index, GLdouble n, GLdouble f)
{
	_impl::DepthRangeIndexed(index, n, f);
}
inline void depth_rangef(GLfloat n, GLfloat f)
{
	_impl::DepthRangef(n, f);
}
inline void gen_program_pipelines(GLsizei n, GLuint * pipelines)
{
	_impl::GenProgramPipelines(n, pipelines);
}
inline void get_doublei_v(GLenum target, GLuint index, GLdouble * data)
{
	_impl::GetDoublei_v(target, index, data);
}
inline void get_floati_v(GLenum target, GLuint index, GLfloat * data)
{
	_impl::GetFloati_v(target, index, data);
}
inline void get_program_binary(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary)
{
	_impl::GetProgramBinary(program, bufSize, length, binaryFormat, binary);
}
inline void get_program_pipeline_info_log(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog)
{
	_impl::GetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
}
inline void get_program_pipelineiv(GLuint pipeline, GLenum pname, GLint * params)
{
	_impl::GetProgramPipelineiv(pipeline, pname, params);
}
inline void get_shader_precision_format(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision)
{
	_impl::GetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
}
inline void get_vertex_attrib_ldv(GLuint index, GLenum pname, GLdouble * params)
{
	_impl::GetVertexAttribLdv(index, pname, params);
}
inline GLboolean is_program_pipeline(GLuint pipeline)
{
	return _impl::IsProgramPipeline(pipeline);
}
inline void program_binary(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length)
{
	_impl::ProgramBinary(program, binaryFormat, binary, length);
}
inline void program_parameteri(GLuint program, GLenum pname, GLint value)
{
	_impl::ProgramParameteri(program, pname, value);
}
inline void program_uniform1d(GLuint program, GLint location, GLdouble v0)
{
	_impl::ProgramUniform1d(program, location, v0);
}
inline void program_uniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
	_impl::ProgramUniform1dv(program, location, count, value);
}
inline void program_uniform1f(GLuint program, GLint location, GLfloat v0)
{
	_impl::ProgramUniform1f(program, location, v0);
}
inline void program_uniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
	_impl::ProgramUniform1fv(program, location, count, value);
}
inline void program_uniform1i(GLuint program, GLint location, GLint v0)
{
	_impl::ProgramUniform1i(program, location, v0);
}
inline void program_uniform1iv(GLuint program, GLint location, GLsizei count, const GLint * value)
{
	_impl::ProgramUniform1iv(program, location, count, value);
}
inline void program_uniform1ui(GLuint program, GLint location, GLuint v0)
{
	_impl::ProgramUniform1ui(program, location, v0);
}
inline void program_uniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint * value)
{
	_impl::ProgramUniform1uiv(program, location, count, value);
}
inline void program_uniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1)
{
	_impl::ProgramUniform2d(program, location, v0, v1);
}
inline void program_uniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
	_impl::ProgramUniform2dv(program, location, count, value);
}
inline void program_uniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
	_impl::ProgramUniform2f(program, location, v0, v1);
}
inline void program_uniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
	_impl::ProgramUniform2fv(program, location, count, value);
}
inline void program_uniform2i(GLuint program, GLint location, GLint v0, GLint v1)
{
	_impl::ProgramUniform2i(program, location, v0, v1);
}
inline void program_uniform2iv(GLuint program, GLint location, GLsizei count, const GLint * value)
{
	_impl::ProgramUniform2iv(program, location, count, value);
}
inline void program_uniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1)
{
	_impl::ProgramUniform2ui(program, location, v0, v1);
}
inline void program_uniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint * value)
{
	_impl::ProgramUniform2uiv(program, location, count, value);
}
inline void program_uniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2)
{
	_impl::ProgramUniform3d(program, location, v0, v1, v2);
}
inline void program_uniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
	_impl::ProgramUniform3dv(program, location, count, value);
}
inline void program_uniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
	_impl::ProgramUniform3f(program, location, v0, v1, v2);
}
inline void program_uniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
	_impl::ProgramUniform3fv(program, location, count, value);
}
inline void program_uniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
	_impl::ProgramUniform3i(program, location, v0, v1, v2);
}
inline void program_uniform3iv(GLuint program, GLint location, GLsizei count, const GLint * value)
{
	_impl::ProgramUniform3iv(program, location, count, value);
}
inline void program_uniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
	_impl::ProgramUniform3ui(program, location, v0, v1, v2);
}
inline void program_uniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint * value)
{
	_impl::ProgramUniform3uiv(program, location, count, value);
}
inline void program_uniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)
{
	_impl::ProgramUniform4d(program, location, v0, v1, v2, v3);
}
inline void program_uniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
	_impl::ProgramUniform4dv(program, location, count, value);
}
inline void program_uniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
	_impl::ProgramUniform4f(program, location, v0, v1, v2, v3);
}
inline void program_uniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
	_impl::ProgramUniform4fv(program, location, count, value);
}
inline void program_uniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
	_impl::ProgramUniform4i(program, location, v0, v1, v2, v3);
}
inline void program_uniform4iv(GLuint program, GLint location, GLsizei count, const GLint * value)
{
	_impl::ProgramUniform4iv(program, location, count, value);
}
inline void program_uniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
	_impl::ProgramUniform4ui(program, location, v0, v1, v2, v3);
}
inline void program_uniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint * value)
{
	_impl::ProgramUniform4uiv(program, location, count, value);
}
inline void program_uniform_matrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::ProgramUniformMatrix2dv(program, location, count, transpose, value);
}
inline void program_uniform_matrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	_impl::ProgramUniformMatrix2fv(program, location, count, transpose, value);
}
inline void program_uniform_matrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::ProgramUniformMatrix2x3dv(program, location, count, transpose, value);
}
inline void program_uniform_matrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	_impl::ProgramUniformMatrix2x3fv(program, location, count, transpose, value);
}
inline void program_uniform_matrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::ProgramUniformMatrix2x4dv(program, location, count, transpose, value);
}
inline void program_uniform_matrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	_impl::ProgramUniformMatrix2x4fv(program, location, count, transpose, value);
}
inline void program_uniform_matrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::ProgramUniformMatrix3dv(program, location, count, transpose, value);
}
inline void program_uniform_matrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	_impl::ProgramUniformMatrix3fv(program, location, count, transpose, value);
}
inline void program_uniform_matrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::ProgramUniformMatrix3x2dv(program, location, count, transpose, value);
}
inline void program_uniform_matrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	_impl::ProgramUniformMatrix3x2fv(program, location, count, transpose, value);
}
inline void program_uniform_matrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::ProgramUniformMatrix3x4dv(program, location, count, transpose, value);
}
inline void program_uniform_matrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	_impl::ProgramUniformMatrix3x4fv(program, location, count, transpose, value);
}
inline void program_uniform_matrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::ProgramUniformMatrix4dv(program, location, count, transpose, value);
}
inline void program_uniform_matrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	_impl::ProgramUniformMatrix4fv(program, location, count, transpose, value);
}
inline void program_uniform_matrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::ProgramUniformMatrix4x2dv(program, location, count, transpose, value);
}
inline void program_uniform_matrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	_impl::ProgramUniformMatrix4x2fv(program, location, count, transpose, value);
}
inline void program_uniform_matrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::ProgramUniformMatrix4x3dv(program, location, count, transpose, value);
}
inline void program_uniform_matrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	_impl::ProgramUniformMatrix4x3fv(program, location, count, transpose, value);
}
inline void release_shader_compiler(void)
{
	_impl::ReleaseShaderCompiler();
}
inline void scissor_arrayv(GLuint first, GLsizei count, const GLint * v)
{
	_impl::ScissorArrayv(first, count, v);
}
inline void scissor_indexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)
{
	_impl::ScissorIndexed(index, left, bottom, width, height);
}
inline void scissor_indexedv(GLuint index, const GLint * v)
{
	_impl::ScissorIndexedv(index, v);
}
inline void shader_binary(GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length)
{
	_impl::ShaderBinary(count, shaders, binaryformat, binary, length);
}
inline void use_program_stages(GLuint pipeline, GLbitfield stages, GLuint program)
{
	_impl::UseProgramStages(pipeline, stages, program);
}
inline void validate_program_pipeline(GLuint pipeline)
{
	_impl::ValidateProgramPipeline(pipeline);
}
inline void vertex_attrib_l1d(GLuint index, GLdouble x)
{
	_impl::VertexAttribL1d(index, x);
}
inline void vertex_attrib_l1dv(GLuint index, const GLdouble * v)
{
	_impl::VertexAttribL1dv(index, v);
}
inline void vertex_attrib_l2d(GLuint index, GLdouble x, GLdouble y)
{
	_impl::VertexAttribL2d(index, x, y);
}
inline void vertex_attrib_l2dv(GLuint index, const GLdouble * v)
{
	_impl::VertexAttribL2dv(index, v);
}
inline void vertex_attrib_l3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
	_impl::VertexAttribL3d(index, x, y, z);
}
inline void vertex_attrib_l3dv(GLuint index, const GLdouble * v)
{
	_impl::VertexAttribL3dv(index, v);
}
inline void vertex_attrib_l4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
	_impl::VertexAttribL4d(index, x, y, z, w);
}
inline void vertex_attrib_l4dv(GLuint index, const GLdouble * v)
{
	_impl::VertexAttribL4dv(index, v);
}
inline void vertex_attrib_l_pointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer)
{
	_impl::VertexAttribLPointer(index, size, type, stride, pointer);
}
inline void viewport_arrayv(GLuint first, GLsizei count, const GLfloat * v)
{
	_impl::ViewportArrayv(first, count, v);
}
inline void viewport_indexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
{
	_impl::ViewportIndexedf(index, x, y, w, h);
}
inline void viewport_indexedfv(GLuint index, const GLfloat * v)
{
	_impl::ViewportIndexedfv(index, v);
}

/* gl version 4.2 */
inline void bind_image_texture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
{
	_impl::BindImageTexture(unit, texture, level, layered, layer, access, format);
}
inline void draw_arrays_instanced_base_instance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)
{
	_impl::DrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance);
}
inline void draw_elements_instanced_base_instance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance)
{
	_impl::DrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);
}
inline void draw_elements_instanced_base_vertex_base_instance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)
{
	_impl::DrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);
}
inline void draw_transform_feedback_instanced(GLenum mode, GLuint id, GLsizei instancecount)
{
	_impl::DrawTransformFeedbackInstanced(mode, id, instancecount);
}
inline void draw_transform_feedback_stream_instanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount)
{
	_impl::DrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount);
}
inline void get_active_atomic_counter_bufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint * params)
{
	_impl::GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params);
}
inline void get_internalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint * params)
{
	_impl::GetInternalformativ(target, internalformat, pname, bufSize, params);
}
inline void memory_barrier(GLbitfield barriers)
{
	_impl::MemoryBarrier(barriers);
}
inline void tex_storage1_d(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
	_impl::TexStorage1D(target, levels, internalformat, width);
}
inline void tex_storage2_d(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
	_impl::TexStorage2D(target, levels, internalformat, width, height);
}
inline void tex_storage3_d(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
	_impl::TexStorage3D(target, levels, internalformat, width, height, depth);
}

/* gl version 4.3 */
inline void bind_vertex_buffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
	_impl::BindVertexBuffer(bindingindex, buffer, offset, stride);
}
inline void clear_buffer_data(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data)
{
	_impl::ClearBufferData(target, internalformat, format, type, data);
}
inline void clear_buffer_sub_data(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data)
{
	_impl::ClearBufferSubData(target, internalformat, offset, size, format, type, data);
}
inline void copy_image_sub_data(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
	_impl::CopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}
inline void debug_message_callback(GLDEBUGPROC callback, const void * userParam)
{
	_impl::DebugMessageCallback(callback, userParam);
}
inline void debug_message_control(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled)
{
	_impl::DebugMessageControl(source, type, severity, count, ids, enabled);
}
inline void debug_message_insert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf)
{
	_impl::DebugMessageInsert(source, type, id, severity, length, buf);
}
inline void dispatch_compute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
{
	_impl::DispatchCompute(num_groups_x, num_groups_y, num_groups_z);
}
inline void dispatch_compute_indirect(GLintptr indirect)
{
	_impl::DispatchComputeIndirect(indirect);
}
inline void framebuffer_parameteri(GLenum target, GLenum pname, GLint param)
{
	_impl::FramebufferParameteri(target, pname, param);
}
inline GLuint get_debug_message_log(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog)
{
	return _impl::GetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog);
}
inline void get_framebuffer_parameteriv(GLenum target, GLenum pname, GLint * params)
{
	_impl::GetFramebufferParameteriv(target, pname, params);
}
inline void get_internalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 * params)
{
	_impl::GetInternalformati64v(target, internalformat, pname, bufSize, params);
}
inline void get_object_label(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label)
{
	_impl::GetObjectLabel(identifier, name, bufSize, length, label);
}
inline void get_object_ptr_label(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label)
{
	_impl::GetObjectPtrLabel(ptr, bufSize, length, label);
}
inline void get_program_interfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint * params)
{
	_impl::GetProgramInterfaceiv(program, programInterface, pname, params);
}
inline GLuint get_program_resource_index(GLuint program, GLenum programInterface, const GLchar * name)
{
	return _impl::GetProgramResourceIndex(program, programInterface, name);
}
inline GLint get_program_resource_location(GLuint program, GLenum programInterface, const GLchar * name)
{
	return _impl::GetProgramResourceLocation(program, programInterface, name);
}
inline GLint get_program_resource_location_index(GLuint program, GLenum programInterface, const GLchar * name)
{
	return _impl::GetProgramResourceLocationIndex(program, programInterface, name);
}
inline void get_program_resource_name(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name)
{
	_impl::GetProgramResourceName(program, programInterface, index, bufSize, length, name);
}
inline void get_program_resourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params)
{
	_impl::GetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params);
}
inline void invalidate_buffer_data(GLuint buffer)
{
	_impl::InvalidateBufferData(buffer);
}
inline void invalidate_buffer_sub_data(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
	_impl::InvalidateBufferSubData(buffer, offset, length);
}
inline void invalidate_framebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments)
{
	_impl::InvalidateFramebuffer(target, numAttachments, attachments);
}
inline void invalidate_sub_framebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
	_impl::InvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
}
inline void invalidate_tex_image(GLuint texture, GLint level)
{
	_impl::InvalidateTexImage(texture, level);
}
inline void invalidate_tex_sub_image(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
{
	_impl::InvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
}
inline void multi_draw_arrays_indirect(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride)
{
	_impl::MultiDrawArraysIndirect(mode, indirect, drawcount, stride);
}
inline void multi_draw_elements_indirect(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride)
{
	_impl::MultiDrawElementsIndirect(mode, type, indirect, drawcount, stride);
}
inline void object_label(GLenum identifier, GLuint name, GLsizei length, const GLchar * label)
{
	_impl::ObjectLabel(identifier, name, length, label);
}
inline void object_ptr_label(const void * ptr, GLsizei length, const GLchar * label)
{
	_impl::ObjectPtrLabel(ptr, length, label);
}
inline void pop_debug_group(void)
{
	_impl::PopDebugGroup();
}
inline void push_debug_group(GLenum source, GLuint id, GLsizei length, const GLchar * message)
{
	_impl::PushDebugGroup(source, id, length, message);
}
inline void shader_storage_block_binding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
{
	_impl::ShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
}
inline void tex_buffer_range(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
	_impl::TexBufferRange(target, internalformat, buffer, offset, size);
}
inline void tex_storage2_d_multisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
	_impl::TexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
}
inline void tex_storage3_d_multisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
	_impl::TexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}
inline void texture_view(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
{
	_impl::TextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}
inline void vertex_attrib_binding(GLuint attribindex, GLuint bindingindex)
{
	_impl::VertexAttribBinding(attribindex, bindingindex);
}
inline void vertex_attrib_format(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
	_impl::VertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
}
inline void vertex_attrib_i_format(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
	_impl::VertexAttribIFormat(attribindex, size, type, relativeoffset);
}
inline void vertex_attrib_l_format(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
	_impl::VertexAttribLFormat(attribindex, size, type, relativeoffset);
}
inline void vertex_binding_divisor(GLuint bindingindex, GLuint divisor)
{
	_impl::VertexBindingDivisor(bindingindex, divisor);
}

/* gl version 4.4 */
inline void bind_buffers_base(GLenum target, GLuint first, GLsizei count, const GLuint * buffers)
{
	_impl::BindBuffersBase(target, first, count, buffers);
}
inline void bind_buffers_range(GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes)
{
	_impl::BindBuffersRange(target, first, count, buffers, offsets, sizes);
}
inline void bind_image_textures(GLuint first, GLsizei count, const GLuint * textures)
{
	_impl::BindImageTextures(first, count, textures);
}
inline void bind_samplers(GLuint first, GLsizei count, const GLuint * samplers)
{
	_impl::BindSamplers(first, count, samplers);
}
inline void bind_textures(GLuint first, GLsizei count, const GLuint * textures)
{
	_impl::BindTextures(first, count, textures);
}
inline void bind_vertex_buffers(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides)
{
	_impl::BindVertexBuffers(first, count, buffers, offsets, strides);
}
inline void buffer_storage(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags)
{
	_impl::BufferStorage(target, size, data, flags);
}
inline void clear_tex_image(GLuint texture, GLint level, GLenum format, GLenum type, const void * data)
{
	_impl::ClearTexImage(texture, level, format, type, data);
}
inline void clear_tex_sub_image(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data)
{
	_impl::ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
}

/* gl version 4.5 */
inline void bind_texture_unit(GLuint unit, GLuint texture)
{
	_impl::BindTextureUnit(unit, texture);
}
inline void blit_named_framebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
	_impl::BlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
inline GLenum check_named_framebuffer_status(GLuint framebuffer, GLenum target)
{
	return _impl::CheckNamedFramebufferStatus(framebuffer, target);
}
inline void clear_named_buffer_data(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data)
{
	_impl::ClearNamedBufferData(buffer, internalformat, format, type, data);
}
inline void clear_named_buffer_sub_data(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data)
{
	_impl::ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);
}
inline void clear_named_framebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat depth, GLint stencil)
{
	_impl::ClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil);
}
inline void clear_named_framebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value)
{
	_impl::ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value);
}
inline void clear_named_framebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value)
{
	_impl::ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value);
}
inline void clear_named_framebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value)
{
	_impl::ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value);
}
inline void clip_control(GLenum origin, GLenum depth)
{
	_impl::ClipControl(origin, depth);
}
inline void compressed_texture_sub_image1_d(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data)
{
	_impl::CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);
}
inline void compressed_texture_sub_image2_d(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data)
{
	_impl::CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
}
inline void compressed_texture_sub_image3_d(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data)
{
	_impl::CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}
inline void copy_named_buffer_sub_data(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
	_impl::CopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);
}
inline void copy_texture_sub_image1_d(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
	_impl::CopyTextureSubImage1D(texture, level, xoffset, x, y, width);
}
inline void copy_texture_sub_image2_d(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
	_impl::CopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height);
}
inline void copy_texture_sub_image3_d(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
	_impl::CopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
}
inline void create_buffers(GLsizei n, GLuint * buffers)
{
	_impl::CreateBuffers(n, buffers);
}
inline void create_framebuffers(GLsizei n, GLuint * framebuffers)
{
	_impl::CreateFramebuffers(n, framebuffers);
}
inline void create_program_pipelines(GLsizei n, GLuint * pipelines)
{
	_impl::CreateProgramPipelines(n, pipelines);
}
inline void create_queries(GLenum target, GLsizei n, GLuint * ids)
{
	_impl::CreateQueries(target, n, ids);
}
inline void create_renderbuffers(GLsizei n, GLuint * renderbuffers)
{
	_impl::CreateRenderbuffers(n, renderbuffers);
}
inline void create_samplers(GLsizei n, GLuint * samplers)
{
	_impl::CreateSamplers(n, samplers);
}
inline void create_textures(GLenum target, GLsizei n, GLuint * textures)
{
	_impl::CreateTextures(target, n, textures);
}
inline void create_transform_feedbacks(GLsizei n, GLuint * ids)
{
	_impl::CreateTransformFeedbacks(n, ids);
}
inline void create_vertex_arrays(GLsizei n, GLuint * arrays)
{
	_impl::CreateVertexArrays(n, arrays);
}
inline void disable_vertex_array_attrib(GLuint vaobj, GLuint index)
{
	_impl::DisableVertexArrayAttrib(vaobj, index);
}
inline void enable_vertex_array_attrib(GLuint vaobj, GLuint index)
{
	_impl::EnableVertexArrayAttrib(vaobj, index);
}
inline void flush_mapped_named_buffer_range(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
	_impl::FlushMappedNamedBufferRange(buffer, offset, length);
}
inline void generate_texture_mipmap(GLuint texture)
{
	_impl::GenerateTextureMipmap(texture);
}
inline void get_compressed_texture_image(GLuint texture, GLint level, GLsizei bufSize, void * pixels)
{
	_impl::GetCompressedTextureImage(texture, level, bufSize, pixels);
}
inline void get_compressed_texture_sub_image(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels)
{
	_impl::GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
}
inline GLenum get_graphics_reset_status(void)
{
	return _impl::GetGraphicsResetStatus();
}
inline void get_named_buffer_parameteri64v(GLuint buffer, GLenum pname, GLint64 * params)
{
	_impl::GetNamedBufferParameteri64v(buffer, pname, params);
}
inline void get_named_buffer_parameteriv(GLuint buffer, GLenum pname, GLint * params)
{
	_impl::GetNamedBufferParameteriv(buffer, pname, params);
}
inline void get_named_buffer_pointerv(GLuint buffer, GLenum pname, void ** params)
{
	_impl::GetNamedBufferPointerv(buffer, pname, params);
}
inline void get_named_buffer_sub_data(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data)
{
	_impl::GetNamedBufferSubData(buffer, offset, size, data);
}
inline void get_named_framebuffer_attachment_parameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params)
{
	_impl::GetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params);
}
inline void get_named_framebuffer_parameteriv(GLuint framebuffer, GLenum pname, GLint * param)
{
	_impl::GetNamedFramebufferParameteriv(framebuffer, pname, param);
}
inline void get_named_renderbuffer_parameteriv(GLuint renderbuffer, GLenum pname, GLint * params)
{
	_impl::GetNamedRenderbufferParameteriv(renderbuffer, pname, params);
}
inline void get_query_buffer_objecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
	_impl::GetQueryBufferObjecti64v(id, buffer, pname, offset);
}
inline void get_query_buffer_objectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
	_impl::GetQueryBufferObjectiv(id, buffer, pname, offset);
}
inline void get_query_buffer_objectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
	_impl::GetQueryBufferObjectui64v(id, buffer, pname, offset);
}
inline void get_query_buffer_objectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
	_impl::GetQueryBufferObjectuiv(id, buffer, pname, offset);
}
inline void get_texture_image(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels)
{
	_impl::GetTextureImage(texture, level, format, type, bufSize, pixels);
}
inline void get_texture_level_parameterfv(GLuint texture, GLint level, GLenum pname, GLfloat * params)
{
	_impl::GetTextureLevelParameterfv(texture, level, pname, params);
}
inline void get_texture_level_parameteriv(GLuint texture, GLint level, GLenum pname, GLint * params)
{
	_impl::GetTextureLevelParameteriv(texture, level, pname, params);
}
inline void get_texture_parameter_iiv(GLuint texture, GLenum pname, GLint * params)
{
	_impl::GetTextureParameterIiv(texture, pname, params);
}
inline void get_texture_parameter_iuiv(GLuint texture, GLenum pname, GLuint * params)
{
	_impl::GetTextureParameterIuiv(texture, pname, params);
}
inline void get_texture_parameterfv(GLuint texture, GLenum pname, GLfloat * params)
{
	_impl::GetTextureParameterfv(texture, pname, params);
}
inline void get_texture_parameteriv(GLuint texture, GLenum pname, GLint * params)
{
	_impl::GetTextureParameteriv(texture, pname, params);
}
inline void get_texture_sub_image(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels)
{
	_impl::GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
}
inline void get_transform_feedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 * param)
{
	_impl::GetTransformFeedbacki64_v(xfb, pname, index, param);
}
inline void get_transform_feedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint * param)
{
	_impl::GetTransformFeedbacki_v(xfb, pname, index, param);
}
inline void get_transform_feedbackiv(GLuint xfb, GLenum pname, GLint * param)
{
	_impl::GetTransformFeedbackiv(xfb, pname, param);
}
inline void get_vertex_array_indexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 * param)
{
	_impl::GetVertexArrayIndexed64iv(vaobj, index, pname, param);
}
inline void get_vertex_array_indexediv(GLuint vaobj, GLuint index, GLenum pname, GLint * param)
{
	_impl::GetVertexArrayIndexediv(vaobj, index, pname, param);
}
inline void get_vertex_arrayiv(GLuint vaobj, GLenum pname, GLint * param)
{
	_impl::GetVertexArrayiv(vaobj, pname, param);
}
inline void getn_compressed_tex_image(GLenum target, GLint lod, GLsizei bufSize, void * pixels)
{
	_impl::GetnCompressedTexImage(target, lod, bufSize, pixels);
}
inline void getn_tex_image(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels)
{
	_impl::GetnTexImage(target, level, format, type, bufSize, pixels);
}
inline void getn_uniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble * params)
{
	_impl::GetnUniformdv(program, location, bufSize, params);
}
inline void getn_uniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat * params)
{
	_impl::GetnUniformfv(program, location, bufSize, params);
}
inline void getn_uniformiv(GLuint program, GLint location, GLsizei bufSize, GLint * params)
{
	_impl::GetnUniformiv(program, location, bufSize, params);
}
inline void getn_uniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint * params)
{
	_impl::GetnUniformuiv(program, location, bufSize, params);
}
inline void invalidate_named_framebuffer_data(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments)
{
	_impl::InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments);
}
inline void invalidate_named_framebuffer_sub_data(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
	_impl::InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height);
}
inline void * map_named_buffer(GLuint buffer, GLenum access)
{
	return _impl::MapNamedBuffer(buffer, access);
}
inline void * map_named_buffer_range(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
	return _impl::MapNamedBufferRange(buffer, offset, length, access);
}
inline void memory_barrier_by_region(GLbitfield barriers)
{
	_impl::MemoryBarrierByRegion(barriers);
}
inline void named_buffer_data(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage)
{
	_impl::NamedBufferData(buffer, size, data, usage);
}
inline void named_buffer_storage(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags)
{
	_impl::NamedBufferStorage(buffer, size, data, flags);
}
inline void named_buffer_sub_data(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data)
{
	_impl::NamedBufferSubData(buffer, offset, size, data);
}
inline void named_framebuffer_draw_buffer(GLuint framebuffer, GLenum buf)
{
	_impl::NamedFramebufferDrawBuffer(framebuffer, buf);
}
inline void named_framebuffer_draw_buffers(GLuint framebuffer, GLsizei n, const GLenum * bufs)
{
	_impl::NamedFramebufferDrawBuffers(framebuffer, n, bufs);
}
inline void named_framebuffer_parameteri(GLuint framebuffer, GLenum pname, GLint param)
{
	_impl::NamedFramebufferParameteri(framebuffer, pname, param);
}
inline void named_framebuffer_read_buffer(GLuint framebuffer, GLenum src)
{
	_impl::NamedFramebufferReadBuffer(framebuffer, src);
}
inline void named_framebuffer_renderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
	_impl::NamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer);
}
inline void named_framebuffer_texture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
{
	_impl::NamedFramebufferTexture(framebuffer, attachment, texture, level);
}
inline void named_framebuffer_texture_layer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
	_impl::NamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer);
}
inline void named_renderbuffer_storage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
{
	_impl::NamedRenderbufferStorage(renderbuffer, internalformat, width, height);
}
inline void named_renderbuffer_storage_multisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
	_impl::NamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height);
}
inline void readn_pixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data)
{
	_impl::ReadnPixels(x, y, width, height, format, type, bufSize, data);
}
inline void texture_barrier(void)
{
	_impl::TextureBarrier();
}
inline void texture_buffer(GLuint texture, GLenum internalformat, GLuint buffer)
{
	_impl::TextureBuffer(texture, internalformat, buffer);
}
inline void texture_buffer_range(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
	_impl::TextureBufferRange(texture, internalformat, buffer, offset, size);
}
inline void texture_parameter_iiv(GLuint texture, GLenum pname, const GLint * params)
{
	_impl::TextureParameterIiv(texture, pname, params);
}
inline void texture_parameter_iuiv(GLuint texture, GLenum pname, const GLuint * params)
{
	_impl::TextureParameterIuiv(texture, pname, params);
}
inline void texture_parameterf(GLuint texture, GLenum pname, GLfloat param)
{
	_impl::TextureParameterf(texture, pname, param);
}
inline void texture_parameterfv(GLuint texture, GLenum pname, const GLfloat * param)
{
	_impl::TextureParameterfv(texture, pname, param);
}
inline void texture_parameteri(GLuint texture, GLenum pname, GLint param)
{
	_impl::TextureParameteri(texture, pname, param);
}
inline void texture_parameteriv(GLuint texture, GLenum pname, const GLint * param)
{
	_impl::TextureParameteriv(texture, pname, param);
}
inline void texture_storage1_d(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width)
{
	_impl::TextureStorage1D(texture, levels, internalformat, width);
}
inline void texture_storage2_d(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
	_impl::TextureStorage2D(texture, levels, internalformat, width, height);
}
inline void texture_storage2_d_multisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
	_impl::TextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations);
}
inline void texture_storage3_d(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
	_impl::TextureStorage3D(texture, levels, internalformat, width, height, depth);
}
inline void texture_storage3_d_multisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
	_impl::TextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
}
inline void texture_sub_image1_d(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels)
{
	_impl::TextureSubImage1D(texture, level, xoffset, width, format, type, pixels);
}
inline void texture_sub_image2_d(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels)
{
	_impl::TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels);
}
inline void texture_sub_image3_d(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels)
{
	_impl::TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}
inline void transform_feedback_buffer_base(GLuint xfb, GLuint index, GLuint buffer)
{
	_impl::TransformFeedbackBufferBase(xfb, index, buffer);
}
inline void transform_feedback_buffer_range(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
	_impl::TransformFeedbackBufferRange(xfb, index, buffer, offset, size);
}
inline GLboolean unmap_named_buffer(GLuint buffer)
{
	return _impl::UnmapNamedBuffer(buffer);
}
inline void vertex_array_attrib_binding(GLuint vaobj, GLuint attribindex, GLuint bindingindex)
{
	_impl::VertexArrayAttribBinding(vaobj, attribindex, bindingindex);
}
inline void vertex_array_attrib_format(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
	_impl::VertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset);
}
inline void vertex_array_attrib_i_format(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
	_impl::VertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset);
}
inline void vertex_array_attrib_l_format(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
	_impl::VertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset);
}
inline void vertex_array_binding_divisor(GLuint vaobj, GLuint bindingindex, GLuint divisor)
{
	_impl::VertexArrayBindingDivisor(vaobj, bindingindex, divisor);
}
inline void vertex_array_element_buffer(GLuint vaobj, GLuint buffer)
{
	_impl::VertexArrayElementBuffer(vaobj, buffer);
}
inline void vertex_array_vertex_buffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
	_impl::VertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride);
}
inline void vertex_array_vertex_buffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides)
{
	_impl::VertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides);
}

} //namespace gl
} //namespace aw
#endif//aw_gl_ext_opengl_4_5_h
