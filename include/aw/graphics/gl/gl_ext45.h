/*
 * This file is automatically generated.
 */
#ifndef aw_gl_ext_opengl_4_5_h
#define aw_gl_ext_opengl_4_5_h
#include "gl_ext33.h"

namespace aw {
namespace gl {
namespace sys {
ext::load_result load_functions_4_1();
ext::load_result load_functions_4_5();
} //namespace sys

enum {
	/* gl version 1.1 */
	QUADS                            = 0x0007,
	STACK_OVERFLOW                   = 0x0503,
	STACK_UNDERFLOW                  = 0x0504,
	VERTEX_ARRAY                     = 0x8074,

	/* gl version 4.0 */
	ACTIVE_SUBROUTINES               = 0x8DE5,
	ACTIVE_SUBROUTINE_MAX_LENGTH     = 0x8E48,
	ACTIVE_SUBROUTINE_UNIFORMS       = 0x8DE6,
	ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47,
	ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49,
	COMPATIBLE_SUBROUTINES           = 0x8E4B,
	DOUBLE_MAT2                      = 0x8F46,
	DOUBLE_MAT2x3                    = 0x8F49,
	DOUBLE_MAT2x4                    = 0x8F4A,
	DOUBLE_MAT3                      = 0x8F47,
	DOUBLE_MAT3x2                    = 0x8F4B,
	DOUBLE_MAT3x4                    = 0x8F4C,
	DOUBLE_MAT4                      = 0x8F48,
	DOUBLE_MAT4x2                    = 0x8F4D,
	DOUBLE_MAT4x3                    = 0x8F4E,
	DOUBLE_VEC2                      = 0x8FFC,
	DOUBLE_VEC3                      = 0x8FFD,
	DOUBLE_VEC4                      = 0x8FFE,
	DRAW_INDIRECT_BUFFER             = 0x8F3F,
	DRAW_INDIRECT_BUFFER_BINDING     = 0x8F43,
	FRACTIONAL_EVEN                  = 0x8E7C,
	FRACTIONAL_ODD                   = 0x8E7B,
	FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D,
	GEOMETRY_SHADER_INVOCATIONS      = 0x887F,
	INT_SAMPLER_CUBE_MAP_ARRAY       = 0x900E,
	ISOLINES                         = 0x8E7A,
	MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E,
	MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F,
	MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C,
	MAX_GEOMETRY_SHADER_INVOCATIONS  = 0x8E5A,
	MAX_PATCH_VERTICES               = 0x8E7D,
	MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F,
	MAX_SUBROUTINES                  = 0x8DE7,
	MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8,
	MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C,
	MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83,
	MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81,
	MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85,
	MAX_TESS_CONTROL_UNIFORM_BLOCKS  = 0x8E89,
	MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F,
	MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D,
	MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86,
	MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82,
	MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A,
	MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80,
	MAX_TESS_GEN_LEVEL               = 0x8E7E,
	MAX_TESS_PATCH_COMPONENTS        = 0x8E84,
	MAX_TRANSFORM_FEEDBACK_BUFFERS   = 0x8E70,
	MAX_VERTEX_STREAMS               = 0x8E71,
	MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B,
	MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E,
	MIN_SAMPLE_SHADING_VALUE         = 0x8C37,
	NUM_COMPATIBLE_SUBROUTINES       = 0x8E4A,
	PATCHES                          = 0x000E,
	PATCH_DEFAULT_INNER_LEVEL        = 0x8E73,
	PATCH_DEFAULT_OUTER_LEVEL        = 0x8E74,
	PATCH_VERTICES                   = 0x8E72,
	PROXY_TEXTURE_CUBE_MAP_ARRAY     = 0x900B,
	SAMPLER_CUBE_MAP_ARRAY           = 0x900C,
	SAMPLER_CUBE_MAP_ARRAY_SHADOW    = 0x900D,
	SAMPLE_SHADING                   = 0x8C36,
	TESS_CONTROL_OUTPUT_VERTICES     = 0x8E75,
	TESS_CONTROL_SHADER              = 0x8E88,
	TESS_EVALUATION_SHADER           = 0x8E87,
	TESS_GEN_MODE                    = 0x8E76,
	TESS_GEN_POINT_MODE              = 0x8E79,
	TESS_GEN_SPACING                 = 0x8E77,
	TESS_GEN_VERTEX_ORDER            = 0x8E78,
	TEXTURE_BINDING_CUBE_MAP_ARRAY   = 0x900A,
	TEXTURE_CUBE_MAP_ARRAY           = 0x9009,
	TRANSFORM_FEEDBACK               = 0x8E22,
	TRANSFORM_FEEDBACK_BINDING       = 0x8E25,
	TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24,
	TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23,
	UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0,
	UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1,
	UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F,
	
	/* gl version 4.1 */
	ACTIVE_PROGRAM                   = 0x8259,
	ALL_SHADER_BITS                  = 0xFFFFFFFF,
	FIXED                            = 0x140C,
	FRAGMENT_SHADER_BIT              = 0x00000002,
	GEOMETRY_SHADER_BIT              = 0x00000004,
	HIGH_FLOAT                       = 0x8DF2,
	HIGH_INT                         = 0x8DF5,
	IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B,
	IMPLEMENTATION_COLOR_READ_TYPE   = 0x8B9A,
	LAYER_PROVOKING_VERTEX           = 0x825E,
	LOW_FLOAT                        = 0x8DF0,
	LOW_INT                          = 0x8DF3,
	MAX_FRAGMENT_UNIFORM_VECTORS     = 0x8DFD,
	MAX_VARYING_VECTORS              = 0x8DFC,
	MAX_VERTEX_UNIFORM_VECTORS       = 0x8DFB,
	MAX_VIEWPORTS                    = 0x825B,
	MEDIUM_FLOAT                     = 0x8DF1,
	MEDIUM_INT                       = 0x8DF4,
	NUM_PROGRAM_BINARY_FORMATS       = 0x87FE,
	NUM_SHADER_BINARY_FORMATS        = 0x8DF9,
	PROGRAM_BINARY_FORMATS           = 0x87FF,
	PROGRAM_BINARY_LENGTH            = 0x8741,
	PROGRAM_BINARY_RETRIEVABLE_HINT  = 0x8257,
	PROGRAM_PIPELINE_BINDING         = 0x825A,
	PROGRAM_SEPARABLE                = 0x8258,
	RGB565                           = 0x8D62,
	SHADER_BINARY_FORMATS            = 0x8DF8,
	SHADER_COMPILER                  = 0x8DFA,
	TESS_CONTROL_SHADER_BIT          = 0x00000008,
	TESS_EVALUATION_SHADER_BIT       = 0x00000010,
	UNDEFINED_VERTEX                 = 0x8260,
	VERTEX_SHADER_BIT                = 0x00000001,
	VIEWPORT_BOUNDS_RANGE            = 0x825D,
	VIEWPORT_INDEX_PROVOKING_VERTEX  = 0x825F,
	VIEWPORT_SUBPIXEL_BITS           = 0x825C,
	
	/* gl version 4.2 */
	ACTIVE_ATOMIC_COUNTER_BUFFERS    = 0x92D9,
	ALL_BARRIER_BITS                 = 0xFFFFFFFF,
	ATOMIC_COUNTER_BARRIER_BIT       = 0x00001000,
	ATOMIC_COUNTER_BUFFER            = 0x92C0,
	ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5,
	ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6,
	ATOMIC_COUNTER_BUFFER_BINDING    = 0x92C1,
	ATOMIC_COUNTER_BUFFER_DATA_SIZE  = 0x92C4,
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB,
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA,
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8,
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9,
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7,
	ATOMIC_COUNTER_BUFFER_SIZE       = 0x92C3,
	ATOMIC_COUNTER_BUFFER_START      = 0x92C2,
	BUFFER_UPDATE_BARRIER_BIT        = 0x00000200,
	COMMAND_BARRIER_BIT              = 0x00000040,
	COMPRESSED_RGBA_BPTC_UNORM       = 0x8E8C,
	COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E,
	COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F,
	COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D,
	COPY_READ_BUFFER_BINDING         = 0x8F36,
	COPY_WRITE_BUFFER_BINDING        = 0x8F37,
	ELEMENT_ARRAY_BARRIER_BIT        = 0x00000002,
	FRAMEBUFFER_BARRIER_BIT          = 0x00000400,
	IMAGE_1D                         = 0x904C,
	IMAGE_1D_ARRAY                   = 0x9052,
	IMAGE_2D                         = 0x904D,
	IMAGE_2D_ARRAY                   = 0x9053,
	IMAGE_2D_MULTISAMPLE             = 0x9055,
	IMAGE_2D_MULTISAMPLE_ARRAY       = 0x9056,
	IMAGE_2D_RECT                    = 0x904F,
	IMAGE_3D                         = 0x904E,
	IMAGE_BINDING_ACCESS             = 0x8F3E,
	IMAGE_BINDING_FORMAT             = 0x906E,
	IMAGE_BINDING_LAYER              = 0x8F3D,
	IMAGE_BINDING_LAYERED            = 0x8F3C,
	IMAGE_BINDING_LEVEL              = 0x8F3B,
	IMAGE_BINDING_NAME               = 0x8F3A,
	IMAGE_BUFFER                     = 0x9051,
	IMAGE_CUBE                       = 0x9050,
	IMAGE_CUBE_MAP_ARRAY             = 0x9054,
	IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9,
	IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8,
	IMAGE_FORMAT_COMPATIBILITY_TYPE  = 0x90C7,
	INT_IMAGE_1D                     = 0x9057,
	INT_IMAGE_1D_ARRAY               = 0x905D,
	INT_IMAGE_2D                     = 0x9058,
	INT_IMAGE_2D_ARRAY               = 0x905E,
	INT_IMAGE_2D_MULTISAMPLE         = 0x9060,
	INT_IMAGE_2D_MULTISAMPLE_ARRAY   = 0x9061,
	INT_IMAGE_2D_RECT                = 0x905A,
	INT_IMAGE_3D                     = 0x9059,
	INT_IMAGE_BUFFER                 = 0x905C,
	INT_IMAGE_CUBE                   = 0x905B,
	INT_IMAGE_CUBE_MAP_ARRAY         = 0x905F,
	MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC,
	MAX_ATOMIC_COUNTER_BUFFER_SIZE   = 0x92D8,
	MAX_COMBINED_ATOMIC_COUNTERS     = 0x92D7,
	MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1,
	MAX_COMBINED_IMAGE_UNIFORMS      = 0x90CF,
	MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39,
	MAX_FRAGMENT_ATOMIC_COUNTERS     = 0x92D6,
	MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0,
	MAX_FRAGMENT_IMAGE_UNIFORMS      = 0x90CE,
	MAX_GEOMETRY_ATOMIC_COUNTERS     = 0x92D5,
	MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF,
	MAX_GEOMETRY_IMAGE_UNIFORMS      = 0x90CD,
	MAX_IMAGE_SAMPLES                = 0x906D,
	MAX_IMAGE_UNITS                  = 0x8F38,
	MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3,
	MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD,
	MAX_TESS_CONTROL_IMAGE_UNIFORMS  = 0x90CB,
	MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4,
	MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE,
	MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC,
	MAX_VERTEX_ATOMIC_COUNTERS       = 0x92D2,
	MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC,
	MAX_VERTEX_IMAGE_UNIFORMS        = 0x90CA,
	MIN_MAP_BUFFER_ALIGNMENT         = 0x90BC,
	NUM_SAMPLE_COUNTS                = 0x9380,
	PACK_COMPRESSED_BLOCK_DEPTH      = 0x912D,
	PACK_COMPRESSED_BLOCK_HEIGHT     = 0x912C,
	PACK_COMPRESSED_BLOCK_SIZE       = 0x912E,
	PACK_COMPRESSED_BLOCK_WIDTH      = 0x912B,
	PIXEL_BUFFER_BARRIER_BIT         = 0x00000080,
	SHADER_IMAGE_ACCESS_BARRIER_BIT  = 0x00000020,
	TEXTURE_FETCH_BARRIER_BIT        = 0x00000008,
	TEXTURE_IMMUTABLE_FORMAT         = 0x912F,
	TEXTURE_UPDATE_BARRIER_BIT       = 0x00000100,
	TRANSFORM_FEEDBACK_ACTIVE        = 0x8E24,
	TRANSFORM_FEEDBACK_BARRIER_BIT   = 0x00000800,
	TRANSFORM_FEEDBACK_PAUSED        = 0x8E23,
	UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA,
	UNIFORM_BARRIER_BIT              = 0x00000004,
	UNPACK_COMPRESSED_BLOCK_DEPTH    = 0x9129,
	UNPACK_COMPRESSED_BLOCK_HEIGHT   = 0x9128,
	UNPACK_COMPRESSED_BLOCK_SIZE     = 0x912A,
	UNPACK_COMPRESSED_BLOCK_WIDTH    = 0x9127,
	UNSIGNED_INT_ATOMIC_COUNTER      = 0x92DB,
	UNSIGNED_INT_IMAGE_1D            = 0x9062,
	UNSIGNED_INT_IMAGE_1D_ARRAY      = 0x9068,
	UNSIGNED_INT_IMAGE_2D            = 0x9063,
	UNSIGNED_INT_IMAGE_2D_ARRAY      = 0x9069,
	UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B,
	UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C,
	UNSIGNED_INT_IMAGE_2D_RECT       = 0x9065,
	UNSIGNED_INT_IMAGE_3D            = 0x9064,
	UNSIGNED_INT_IMAGE_BUFFER        = 0x9067,
	UNSIGNED_INT_IMAGE_CUBE          = 0x9066,
	UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A,
	VERTEX_ATTRIB_ARRAY_BARRIER_BIT  = 0x00000001,
	
	/* gl version 4.3 */
	ACTIVE_RESOURCES                 = 0x92F5,
	ACTIVE_VARIABLES                 = 0x9305,
	ANY_SAMPLES_PASSED_CONSERVATIVE  = 0x8D6A,
	ARRAY_SIZE                       = 0x92FB,
	ARRAY_STRIDE                     = 0x92FE,
	ATOMIC_COUNTER_BUFFER_INDEX      = 0x9301,
	ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED,
	AUTO_GENERATE_MIPMAP             = 0x8295,
	BLOCK_INDEX                      = 0x92FD,
	BUFFER                           = 0x82E0,
	BUFFER_BINDING                   = 0x9302,
	BUFFER_DATA_SIZE                 = 0x9303,
	BUFFER_VARIABLE                  = 0x92E5,
	CAVEAT_SUPPORT                   = 0x82B8,
	CLEAR_BUFFER                     = 0x82B4,
	COLOR_COMPONENTS                 = 0x8283,
	COLOR_ENCODING                   = 0x8296,
	COLOR_RENDERABLE                 = 0x8286,
	COMPRESSED_R11_EAC               = 0x9270,
	COMPRESSED_RG11_EAC              = 0x9272,
	COMPRESSED_RGB8_ETC2             = 0x9274,
	COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276,
	COMPRESSED_RGBA8_ETC2_EAC        = 0x9278,
	COMPRESSED_SIGNED_R11_EAC        = 0x9271,
	COMPRESSED_SIGNED_RG11_EAC       = 0x9273,
	COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279,
	COMPRESSED_SRGB8_ETC2            = 0x9275,
	COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277,
	COMPUTE_SHADER                   = 0x91B9,
	COMPUTE_SHADER_BIT               = 0x00000020,
	COMPUTE_SUBROUTINE               = 0x92ED,
	COMPUTE_SUBROUTINE_UNIFORM       = 0x92F3,
	COMPUTE_TEXTURE                  = 0x82A0,
	COMPUTE_WORK_GROUP_SIZE          = 0x8267,
	CONTEXT_FLAG_DEBUG_BIT           = 0x00000002,
	DEBUG_CALLBACK_FUNCTION          = 0x8244,
	DEBUG_CALLBACK_USER_PARAM        = 0x8245,
	DEBUG_GROUP_STACK_DEPTH          = 0x826D,
	DEBUG_LOGGED_MESSAGES            = 0x9145,
	DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243,
	DEBUG_OUTPUT                     = 0x92E0,
	DEBUG_OUTPUT_SYNCHRONOUS         = 0x8242,
	DEBUG_SEVERITY_HIGH              = 0x9146,
	DEBUG_SEVERITY_LOW               = 0x9148,
	DEBUG_SEVERITY_MEDIUM            = 0x9147,
	DEBUG_SEVERITY_NOTIFICATION      = 0x826B,
	DEBUG_SOURCE_API                 = 0x8246,
	DEBUG_SOURCE_APPLICATION         = 0x824A,
	DEBUG_SOURCE_OTHER               = 0x824B,
	DEBUG_SOURCE_SHADER_COMPILER     = 0x8248,
	DEBUG_SOURCE_THIRD_PARTY         = 0x8249,
	DEBUG_SOURCE_WINDOW_SYSTEM       = 0x8247,
	DEBUG_TYPE_DEPRECATED_BEHAVIOR   = 0x824D,
	DEBUG_TYPE_ERROR                 = 0x824C,
	DEBUG_TYPE_MARKER                = 0x8268,
	DEBUG_TYPE_OTHER                 = 0x8251,
	DEBUG_TYPE_PERFORMANCE           = 0x8250,
	DEBUG_TYPE_POP_GROUP             = 0x826A,
	DEBUG_TYPE_PORTABILITY           = 0x824F,
	DEBUG_TYPE_PUSH_GROUP            = 0x8269,
	DEBUG_TYPE_UNDEFINED_BEHAVIOR    = 0x824E,
	DEPTH_COMPONENTS                 = 0x8284,
	DEPTH_RENDERABLE                 = 0x8287,
	DEPTH_STENCIL_TEXTURE_MODE       = 0x90EA,
	DISPATCH_INDIRECT_BUFFER         = 0x90EE,
	DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF,
	FILTER                           = 0x829A,
	FRAGMENT_SUBROUTINE              = 0x92EC,
	FRAGMENT_SUBROUTINE_UNIFORM      = 0x92F2,
	FRAGMENT_TEXTURE                 = 0x829F,
	FRAMEBUFFER_BLEND                = 0x828B,
	FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314,
	FRAMEBUFFER_DEFAULT_HEIGHT       = 0x9311,
	FRAMEBUFFER_DEFAULT_LAYERS       = 0x9312,
	FRAMEBUFFER_DEFAULT_SAMPLES      = 0x9313,
	FRAMEBUFFER_DEFAULT_WIDTH        = 0x9310,
	FRAMEBUFFER_RENDERABLE           = 0x8289,
	FRAMEBUFFER_RENDERABLE_LAYERED   = 0x828A,
	FULL_SUPPORT                     = 0x82B7,
	GEOMETRY_SUBROUTINE              = 0x92EB,
	GEOMETRY_SUBROUTINE_UNIFORM      = 0x92F1,
	GEOMETRY_TEXTURE                 = 0x829E,
	GET_TEXTURE_IMAGE_FORMAT         = 0x8291,
	GET_TEXTURE_IMAGE_TYPE           = 0x8292,
	IMAGE_CLASS_10_10_10_2           = 0x82C3,
	IMAGE_CLASS_11_11_10             = 0x82C2,
	IMAGE_CLASS_1_X_16               = 0x82BE,
	IMAGE_CLASS_1_X_32               = 0x82BB,
	IMAGE_CLASS_1_X_8                = 0x82C1,
	IMAGE_CLASS_2_X_16               = 0x82BD,
	IMAGE_CLASS_2_X_32               = 0x82BA,
	IMAGE_CLASS_2_X_8                = 0x82C0,
	IMAGE_CLASS_4_X_16               = 0x82BC,
	IMAGE_CLASS_4_X_32               = 0x82B9,
	IMAGE_CLASS_4_X_8                = 0x82BF,
	IMAGE_COMPATIBILITY_CLASS        = 0x82A8,
	IMAGE_PIXEL_FORMAT               = 0x82A9,
	IMAGE_PIXEL_TYPE                 = 0x82AA,
	IMAGE_TEXEL_SIZE                 = 0x82A7,
	INTERNALFORMAT_ALPHA_SIZE        = 0x8274,
	INTERNALFORMAT_ALPHA_TYPE        = 0x827B,
	INTERNALFORMAT_BLUE_SIZE         = 0x8273,
	INTERNALFORMAT_BLUE_TYPE         = 0x827A,
	INTERNALFORMAT_DEPTH_SIZE        = 0x8275,
	INTERNALFORMAT_DEPTH_TYPE        = 0x827C,
	INTERNALFORMAT_GREEN_SIZE        = 0x8272,
	INTERNALFORMAT_GREEN_TYPE        = 0x8279,
	INTERNALFORMAT_PREFERRED         = 0x8270,
	INTERNALFORMAT_RED_SIZE          = 0x8271,
	INTERNALFORMAT_RED_TYPE          = 0x8278,
	INTERNALFORMAT_SHARED_SIZE       = 0x8277,
	INTERNALFORMAT_STENCIL_SIZE      = 0x8276,
	INTERNALFORMAT_STENCIL_TYPE      = 0x827D,
	INTERNALFORMAT_SUPPORTED         = 0x826F,
	IS_PER_PATCH                     = 0x92E7,
	IS_ROW_MAJOR                     = 0x9300,
	LOCATION                         = 0x930E,
	LOCATION_INDEX                   = 0x930F,
	MANUAL_GENERATE_MIPMAP           = 0x8294,
	MATRIX_STRIDE                    = 0x92FF,
	MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266,
	MAX_COMBINED_DIMENSIONS          = 0x8282,
	MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39,
	MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC,
	MAX_COMPUTE_ATOMIC_COUNTERS      = 0x8265,
	MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264,
	MAX_COMPUTE_IMAGE_UNIFORMS       = 0x91BD,
	MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB,
	MAX_COMPUTE_SHARED_MEMORY_SIZE   = 0x8262,
	MAX_COMPUTE_TEXTURE_IMAGE_UNITS  = 0x91BC,
	MAX_COMPUTE_UNIFORM_BLOCKS       = 0x91BB,
	MAX_COMPUTE_UNIFORM_COMPONENTS   = 0x8263,
	MAX_COMPUTE_WORK_GROUP_COUNT     = 0x91BE,
	MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB,
	MAX_COMPUTE_WORK_GROUP_SIZE      = 0x91BF,
	MAX_DEBUG_GROUP_STACK_DEPTH      = 0x826C,
	MAX_DEBUG_LOGGED_MESSAGES        = 0x9144,
	MAX_DEBUG_MESSAGE_LENGTH         = 0x9143,
	MAX_DEPTH                        = 0x8280,
	MAX_ELEMENT_INDEX                = 0x8D6B,
	MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA,
	MAX_FRAMEBUFFER_HEIGHT           = 0x9316,
	MAX_FRAMEBUFFER_LAYERS           = 0x9317,
	MAX_FRAMEBUFFER_SAMPLES          = 0x9318,
	MAX_FRAMEBUFFER_WIDTH            = 0x9315,
	MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7,
	MAX_HEIGHT                       = 0x827F,
	MAX_LABEL_LENGTH                 = 0x82E8,
	MAX_LAYERS                       = 0x8281,
	MAX_NAME_LENGTH                  = 0x92F6,
	MAX_NUM_ACTIVE_VARIABLES         = 0x92F7,
	MAX_NUM_COMPATIBLE_SUBROUTINES   = 0x92F8,
	MAX_SHADER_STORAGE_BLOCK_SIZE    = 0x90DE,
	MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD,
	MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8,
	MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9,
	MAX_UNIFORM_LOCATIONS            = 0x826E,
	MAX_VERTEX_ATTRIB_BINDINGS       = 0x82DA,
	MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9,
	MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6,
	MAX_WIDTH                        = 0x827E,
	MIPMAP                           = 0x8293,
	NAME_LENGTH                      = 0x92F9,
	NUM_ACTIVE_VARIABLES             = 0x9304,
	NUM_SHADING_LANGUAGE_VERSIONS    = 0x82E9,
	OFFSET                           = 0x92FC,
	PRIMITIVE_RESTART_FIXED_INDEX    = 0x8D69,
	PROGRAM                          = 0x82E2,
	PROGRAM_INPUT                    = 0x92E3,
	PROGRAM_OUTPUT                   = 0x92E4,
	PROGRAM_PIPELINE                 = 0x82E4,
	QUERY                            = 0x82E3,
	READ_PIXELS                      = 0x828C,
	READ_PIXELS_FORMAT               = 0x828D,
	READ_PIXELS_TYPE                 = 0x828E,
	REFERENCED_BY_COMPUTE_SHADER     = 0x930B,
	REFERENCED_BY_FRAGMENT_SHADER    = 0x930A,
	REFERENCED_BY_GEOMETRY_SHADER    = 0x9309,
	REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307,
	REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308,
	REFERENCED_BY_VERTEX_SHADER      = 0x9306,
	SAMPLER                          = 0x82E6,
	SHADER                           = 0x82E1,
	SHADER_IMAGE_ATOMIC              = 0x82A6,
	SHADER_IMAGE_LOAD                = 0x82A4,
	SHADER_IMAGE_STORE               = 0x82A5,
	SHADER_STORAGE_BARRIER_BIT       = 0x00002000,
	SHADER_STORAGE_BLOCK             = 0x92E6,
	SHADER_STORAGE_BUFFER            = 0x90D2,
	SHADER_STORAGE_BUFFER_BINDING    = 0x90D3,
	SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF,
	SHADER_STORAGE_BUFFER_SIZE       = 0x90D5,
	SHADER_STORAGE_BUFFER_START      = 0x90D4,
	SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC,
	SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE,
	SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD,
	SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF,
	SRGB_READ                        = 0x8297,
	SRGB_WRITE                       = 0x8298,
	STENCIL_COMPONENTS               = 0x8285,
	STENCIL_RENDERABLE               = 0x8288,
	TESS_CONTROL_SUBROUTINE          = 0x92E9,
	TESS_CONTROL_SUBROUTINE_UNIFORM  = 0x92EF,
	TESS_CONTROL_TEXTURE             = 0x829C,
	TESS_EVALUATION_SUBROUTINE       = 0x92EA,
	TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0,
	TESS_EVALUATION_TEXTURE          = 0x829D,
	TEXTURE_BUFFER_OFFSET            = 0x919D,
	TEXTURE_BUFFER_OFFSET_ALIGNMENT  = 0x919F,
	TEXTURE_BUFFER_SIZE              = 0x919E,
	TEXTURE_COMPRESSED_BLOCK_HEIGHT  = 0x82B2,
	TEXTURE_COMPRESSED_BLOCK_SIZE    = 0x82B3,
	TEXTURE_COMPRESSED_BLOCK_WIDTH   = 0x82B1,
	TEXTURE_GATHER                   = 0x82A2,
	TEXTURE_GATHER_SHADOW            = 0x82A3,
	TEXTURE_IMAGE_FORMAT             = 0x828F,
	TEXTURE_IMAGE_TYPE               = 0x8290,
	TEXTURE_IMMUTABLE_LEVELS         = 0x82DF,
	TEXTURE_SHADOW                   = 0x82A1,
	TEXTURE_VIEW                     = 0x82B5,
	TEXTURE_VIEW_MIN_LAYER           = 0x82DD,
	TEXTURE_VIEW_MIN_LEVEL           = 0x82DB,
	TEXTURE_VIEW_NUM_LAYERS          = 0x82DE,
	TEXTURE_VIEW_NUM_LEVELS          = 0x82DC,
	TOP_LEVEL_ARRAY_SIZE             = 0x930C,
	TOP_LEVEL_ARRAY_STRIDE           = 0x930D,
	TRANSFORM_FEEDBACK_VARYING       = 0x92F4,
	TYPE                             = 0x92FA,
	UNIFORM                          = 0x92E1,
	UNIFORM_BLOCK                    = 0x92E2,
	UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC,
	VERTEX_ATTRIB_ARRAY_LONG         = 0x874E,
	VERTEX_ATTRIB_BINDING            = 0x82D4,
	VERTEX_ATTRIB_RELATIVE_OFFSET    = 0x82D5,
	VERTEX_BINDING_BUFFER            = 0x8F4F,
	VERTEX_BINDING_DIVISOR           = 0x82D6,
	VERTEX_BINDING_OFFSET            = 0x82D7,
	VERTEX_BINDING_STRIDE            = 0x82D8,
	VERTEX_SUBROUTINE                = 0x92E8,
	VERTEX_SUBROUTINE_UNIFORM        = 0x92EE,
	VERTEX_TEXTURE                   = 0x829B,
	VIEW_CLASS_128_BITS              = 0x82C4,
	VIEW_CLASS_16_BITS               = 0x82CA,
	VIEW_CLASS_24_BITS               = 0x82C9,
	VIEW_CLASS_32_BITS               = 0x82C8,
	VIEW_CLASS_48_BITS               = 0x82C7,
	VIEW_CLASS_64_BITS               = 0x82C6,
	VIEW_CLASS_8_BITS                = 0x82CB,
	VIEW_CLASS_96_BITS               = 0x82C5,
	VIEW_CLASS_BPTC_FLOAT            = 0x82D3,
	VIEW_CLASS_BPTC_UNORM            = 0x82D2,
	VIEW_CLASS_RGTC1_RED             = 0x82D0,
	VIEW_CLASS_RGTC2_RG              = 0x82D1,
	VIEW_CLASS_S3TC_DXT1_RGB         = 0x82CC,
	VIEW_CLASS_S3TC_DXT1_RGBA        = 0x82CD,
	VIEW_CLASS_S3TC_DXT3_RGBA        = 0x82CE,
	VIEW_CLASS_S3TC_DXT5_RGBA        = 0x82CF,
	VIEW_COMPATIBILITY_CLASS         = 0x82B6,
	
	/* gl version 4.4 */
	BUFFER_IMMUTABLE_STORAGE         = 0x821F,
	BUFFER_STORAGE_FLAGS             = 0x8220,
	CLEAR_TEXTURE                    = 0x9365,
	CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000,
	CLIENT_STORAGE_BIT               = 0x0200,
	DYNAMIC_STORAGE_BIT              = 0x0100,
	LOCATION_COMPONENT               = 0x934A,
	MAP_COHERENT_BIT                 = 0x0080,
	MAP_PERSISTENT_BIT               = 0x0040,
	MAX_VERTEX_ATTRIB_STRIDE         = 0x82E5,
	MIRROR_CLAMP_TO_EDGE             = 0x8743,
	PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221,
	QUERY_BUFFER                     = 0x9192,
	QUERY_BUFFER_BARRIER_BIT         = 0x00008000,
	QUERY_BUFFER_BINDING             = 0x9193,
	QUERY_RESULT_NO_WAIT             = 0x9194,
	TEXTURE_BUFFER_BINDING           = 0x8C2A,
	TRANSFORM_FEEDBACK_BUFFER_INDEX  = 0x934B,
	TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C,
	
	/* gl version 4.5 */
	CLIP_DEPTH_MODE                  = 0x935D,
	CLIP_ORIGIN                      = 0x935C,
	CONTEXT_FLAG_ROBUST_ACCESS_BIT   = 0x00000004,
	CONTEXT_LOST                     = 0x0507,
	CONTEXT_RELEASE_BEHAVIOR         = 0x82FB,
	CONTEXT_RELEASE_BEHAVIOR_FLUSH   = 0x82FC,
	GUILTY_CONTEXT_RESET             = 0x8253,
	INNOCENT_CONTEXT_RESET           = 0x8254,
	LOSE_CONTEXT_ON_RESET            = 0x8252,
	MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA,
	MAX_CULL_DISTANCES               = 0x82F9,
	NEGATIVE_ONE_TO_ONE              = 0x935E,
	NO_RESET_NOTIFICATION            = 0x8261,
	QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A,
	QUERY_BY_REGION_WAIT_INVERTED    = 0x8E19,
	QUERY_NO_WAIT_INVERTED           = 0x8E18,
	QUERY_TARGET                     = 0x82EA,
	QUERY_WAIT_INVERTED              = 0x8E17,
	RESET_NOTIFICATION_STRATEGY      = 0x8256,
	TEXTURE_TARGET                   = 0x1006,
	UNKNOWN_CONTEXT_RESET            = 0x8255,
	ZERO_TO_ONE                      = 0x935F,
};

namespace _impl {
/* gl version 1.0 */
extern void (AWGL_API* GetPointerv)(GLenum pname, void ** params);

/* gl version 4.0 */
extern void (AWGL_API* BeginQueryIndexed)(GLenum target, GLuint index, GLuint id);
extern void (AWGL_API* BindTransformFeedback)(GLenum target, GLuint id);
extern void (AWGL_API* BlendEquationSeparatei)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
extern void (AWGL_API* BlendEquationi)(GLuint buf, GLenum mode);
extern void (AWGL_API* BlendFuncSeparatei)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
extern void (AWGL_API* BlendFunci)(GLuint buf, GLenum src, GLenum dst);
extern void (AWGL_API* DeleteTransformFeedbacks)(GLsizei n, const GLuint * ids);
extern void (AWGL_API* DrawArraysIndirect)(GLenum mode, const void * indirect);
extern void (AWGL_API* DrawElementsIndirect)(GLenum mode, GLenum type, const void * indirect);
extern void (AWGL_API* DrawTransformFeedback)(GLenum mode, GLuint id);
extern void (AWGL_API* DrawTransformFeedbackStream)(GLenum mode, GLuint id, GLuint stream);
extern void (AWGL_API* EndQueryIndexed)(GLenum target, GLuint index);
extern void (AWGL_API* GenTransformFeedbacks)(GLsizei n, GLuint * ids);
extern void (AWGL_API* GetActiveSubroutineName)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name);
extern void (AWGL_API* GetActiveSubroutineUniformName)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name);
extern void (AWGL_API* GetActiveSubroutineUniformiv)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values);
extern void (AWGL_API* GetProgramStageiv)(GLuint program, GLenum shadertype, GLenum pname, GLint * values);
extern void (AWGL_API* GetQueryIndexediv)(GLenum target, GLuint index, GLenum pname, GLint * params);
extern GLuint (AWGL_API* GetSubroutineIndex)(GLuint program, GLenum shadertype, const GLchar * name);
extern GLint (AWGL_API* GetSubroutineUniformLocation)(GLuint program, GLenum shadertype, const GLchar * name);
extern void (AWGL_API* GetUniformSubroutineuiv)(GLenum shadertype, GLint location, GLuint * params);
extern void (AWGL_API* GetUniformdv)(GLuint program, GLint location, GLdouble * params);
extern GLboolean (AWGL_API* IsTransformFeedback)(GLuint id);
extern void (AWGL_API* MinSampleShading)(GLfloat value);
extern void (AWGL_API* PatchParameterfv)(GLenum pname, const GLfloat * values);
extern void (AWGL_API* PatchParameteri)(GLenum pname, GLint value);
extern void (AWGL_API* PauseTransformFeedback)(void);
extern void (AWGL_API* ResumeTransformFeedback)(void);
extern void (AWGL_API* Uniform1d)(GLint location, GLdouble x);
extern void (AWGL_API* Uniform1dv)(GLint location, GLsizei count, const GLdouble * value);
extern void (AWGL_API* Uniform2d)(GLint location, GLdouble x, GLdouble y);
extern void (AWGL_API* Uniform2dv)(GLint location, GLsizei count, const GLdouble * value);
extern void (AWGL_API* Uniform3d)(GLint location, GLdouble x, GLdouble y, GLdouble z);
extern void (AWGL_API* Uniform3dv)(GLint location, GLsizei count, const GLdouble * value);
extern void (AWGL_API* Uniform4d)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern void (AWGL_API* Uniform4dv)(GLint location, GLsizei count, const GLdouble * value);
extern void (AWGL_API* UniformMatrix2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* UniformMatrix2x3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* UniformMatrix2x4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* UniformMatrix3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* UniformMatrix3x2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* UniformMatrix3x4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* UniformMatrix4dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* UniformMatrix4x2dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* UniformMatrix4x3dv)(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* UniformSubroutinesuiv)(GLenum shadertype, GLsizei count, const GLuint * indices);

/* gl version 4.1 */
extern void (AWGL_API* ActiveShaderProgram)(GLuint pipeline, GLuint program);
extern void (AWGL_API* BindProgramPipeline)(GLuint pipeline);
extern void (AWGL_API* ClearDepthf)(GLfloat d);
extern GLuint (AWGL_API* CreateShaderProgramv)(GLenum type, GLsizei count, const GLchar *const* strings);
extern void (AWGL_API* DeleteProgramPipelines)(GLsizei n, const GLuint * pipelines);
extern void (AWGL_API* DepthRangeArrayv)(GLuint first, GLsizei count, const GLdouble * v);
extern void (AWGL_API* DepthRangeIndexed)(GLuint index, GLdouble n, GLdouble f);
extern void (AWGL_API* DepthRangef)(GLfloat n, GLfloat f);
extern void (AWGL_API* GenProgramPipelines)(GLsizei n, GLuint * pipelines);
extern void (AWGL_API* GetDoublei_v)(GLenum target, GLuint index, GLdouble * data);
extern void (AWGL_API* GetFloati_v)(GLenum target, GLuint index, GLfloat * data);
extern void (AWGL_API* GetProgramBinary)(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary);
extern void (AWGL_API* GetProgramPipelineInfoLog)(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog);
extern void (AWGL_API* GetProgramPipelineiv)(GLuint pipeline, GLenum pname, GLint * params);
extern void (AWGL_API* GetShaderPrecisionFormat)(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision);
extern void (AWGL_API* GetVertexAttribLdv)(GLuint index, GLenum pname, GLdouble * params);
extern GLboolean (AWGL_API* IsProgramPipeline)(GLuint pipeline);
extern void (AWGL_API* ProgramBinary)(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length);
extern void (AWGL_API* ProgramParameteri)(GLuint program, GLenum pname, GLint value);
extern void (AWGL_API* ProgramUniform1d)(GLuint program, GLint location, GLdouble v0);
extern void (AWGL_API* ProgramUniform1dv)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
extern void (AWGL_API* ProgramUniform1f)(GLuint program, GLint location, GLfloat v0);
extern void (AWGL_API* ProgramUniform1fv)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
extern void (AWGL_API* ProgramUniform1i)(GLuint program, GLint location, GLint v0);
extern void (AWGL_API* ProgramUniform1iv)(GLuint program, GLint location, GLsizei count, const GLint * value);
extern void (AWGL_API* ProgramUniform1ui)(GLuint program, GLint location, GLuint v0);
extern void (AWGL_API* ProgramUniform1uiv)(GLuint program, GLint location, GLsizei count, const GLuint * value);
extern void (AWGL_API* ProgramUniform2d)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
extern void (AWGL_API* ProgramUniform2dv)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
extern void (AWGL_API* ProgramUniform2f)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
extern void (AWGL_API* ProgramUniform2fv)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
extern void (AWGL_API* ProgramUniform2i)(GLuint program, GLint location, GLint v0, GLint v1);
extern void (AWGL_API* ProgramUniform2iv)(GLuint program, GLint location, GLsizei count, const GLint * value);
extern void (AWGL_API* ProgramUniform2ui)(GLuint program, GLint location, GLuint v0, GLuint v1);
extern void (AWGL_API* ProgramUniform2uiv)(GLuint program, GLint location, GLsizei count, const GLuint * value);
extern void (AWGL_API* ProgramUniform3d)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
extern void (AWGL_API* ProgramUniform3dv)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
extern void (AWGL_API* ProgramUniform3f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
extern void (AWGL_API* ProgramUniform3fv)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
extern void (AWGL_API* ProgramUniform3i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
extern void (AWGL_API* ProgramUniform3iv)(GLuint program, GLint location, GLsizei count, const GLint * value);
extern void (AWGL_API* ProgramUniform3ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
extern void (AWGL_API* ProgramUniform3uiv)(GLuint program, GLint location, GLsizei count, const GLuint * value);
extern void (AWGL_API* ProgramUniform4d)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
extern void (AWGL_API* ProgramUniform4dv)(GLuint program, GLint location, GLsizei count, const GLdouble * value);
extern void (AWGL_API* ProgramUniform4f)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
extern void (AWGL_API* ProgramUniform4fv)(GLuint program, GLint location, GLsizei count, const GLfloat * value);
extern void (AWGL_API* ProgramUniform4i)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
extern void (AWGL_API* ProgramUniform4iv)(GLuint program, GLint location, GLsizei count, const GLint * value);
extern void (AWGL_API* ProgramUniform4ui)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
extern void (AWGL_API* ProgramUniform4uiv)(GLuint program, GLint location, GLsizei count, const GLuint * value);
extern void (AWGL_API* ProgramUniformMatrix2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* ProgramUniformMatrix2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern void (AWGL_API* ProgramUniformMatrix2x3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* ProgramUniformMatrix2x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern void (AWGL_API* ProgramUniformMatrix2x4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* ProgramUniformMatrix2x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern void (AWGL_API* ProgramUniformMatrix3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* ProgramUniformMatrix3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern void (AWGL_API* ProgramUniformMatrix3x2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* ProgramUniformMatrix3x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern void (AWGL_API* ProgramUniformMatrix3x4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* ProgramUniformMatrix3x4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern void (AWGL_API* ProgramUniformMatrix4dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* ProgramUniformMatrix4fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern void (AWGL_API* ProgramUniformMatrix4x2dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* ProgramUniformMatrix4x2fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern void (AWGL_API* ProgramUniformMatrix4x3dv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value);
extern void (AWGL_API* ProgramUniformMatrix4x3fv)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value);
extern void (AWGL_API* ReleaseShaderCompiler)(void);
extern void (AWGL_API* ScissorArrayv)(GLuint first, GLsizei count, const GLint * v);
extern void (AWGL_API* ScissorIndexed)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
extern void (AWGL_API* ScissorIndexedv)(GLuint index, const GLint * v);
extern void (AWGL_API* ShaderBinary)(GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length);
extern void (AWGL_API* UseProgramStages)(GLuint pipeline, GLbitfield stages, GLuint program);
extern void (AWGL_API* ValidateProgramPipeline)(GLuint pipeline);
extern void (AWGL_API* VertexAttribL1d)(GLuint index, GLdouble x);
extern void (AWGL_API* VertexAttribL1dv)(GLuint index, const GLdouble * v);
extern void (AWGL_API* VertexAttribL2d)(GLuint index, GLdouble x, GLdouble y);
extern void (AWGL_API* VertexAttribL2dv)(GLuint index, const GLdouble * v);
extern void (AWGL_API* VertexAttribL3d)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
extern void (AWGL_API* VertexAttribL3dv)(GLuint index, const GLdouble * v);
extern void (AWGL_API* VertexAttribL4d)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
extern void (AWGL_API* VertexAttribL4dv)(GLuint index, const GLdouble * v);
extern void (AWGL_API* VertexAttribLPointer)(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer);
extern void (AWGL_API* ViewportArrayv)(GLuint first, GLsizei count, const GLfloat * v);
extern void (AWGL_API* ViewportIndexedf)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
extern void (AWGL_API* ViewportIndexedfv)(GLuint index, const GLfloat * v);

/* gl version 4.2 */
extern void (AWGL_API* BindImageTexture)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
extern void (AWGL_API* DrawArraysInstancedBaseInstance)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
extern void (AWGL_API* DrawElementsInstancedBaseInstance)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance);
extern void (AWGL_API* DrawElementsInstancedBaseVertexBaseInstance)(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
extern void (AWGL_API* DrawTransformFeedbackInstanced)(GLenum mode, GLuint id, GLsizei instancecount);
extern void (AWGL_API* DrawTransformFeedbackStreamInstanced)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
extern void (AWGL_API* GetActiveAtomicCounterBufferiv)(GLuint program, GLuint bufferIndex, GLenum pname, GLint * params);
extern void (AWGL_API* GetInternalformativ)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint * params);
extern void (AWGL_API* MemoryBarrier)(GLbitfield barriers);
extern void (AWGL_API* TexStorage1D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
extern void (AWGL_API* TexStorage2D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
extern void (AWGL_API* TexStorage3D)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);

/* gl version 4.3 */
extern void (AWGL_API* BindVertexBuffer)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
extern void (AWGL_API* ClearBufferData)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data);
extern void (AWGL_API* ClearBufferSubData)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
extern void (AWGL_API* CopyImageSubData)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
extern void (AWGL_API* DebugMessageCallback)(GLDEBUGPROC callback, const void * userParam);
extern void (AWGL_API* DebugMessageControl)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled);
extern void (AWGL_API* DebugMessageInsert)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf);
extern void (AWGL_API* DispatchCompute)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
extern void (AWGL_API* DispatchComputeIndirect)(GLintptr indirect);
extern void (AWGL_API* FramebufferParameteri)(GLenum target, GLenum pname, GLint param);
extern GLuint (AWGL_API* GetDebugMessageLog)(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
extern void (AWGL_API* GetFramebufferParameteriv)(GLenum target, GLenum pname, GLint * params);
extern void (AWGL_API* GetInternalformati64v)(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 * params);
extern void (AWGL_API* GetObjectLabel)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label);
extern void (AWGL_API* GetObjectPtrLabel)(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label);
extern void (AWGL_API* GetProgramInterfaceiv)(GLuint program, GLenum programInterface, GLenum pname, GLint * params);
extern GLuint (AWGL_API* GetProgramResourceIndex)(GLuint program, GLenum programInterface, const GLchar * name);
extern GLint (AWGL_API* GetProgramResourceLocation)(GLuint program, GLenum programInterface, const GLchar * name);
extern GLint (AWGL_API* GetProgramResourceLocationIndex)(GLuint program, GLenum programInterface, const GLchar * name);
extern void (AWGL_API* GetProgramResourceName)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name);
extern void (AWGL_API* GetProgramResourceiv)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params);
extern void (AWGL_API* InvalidateBufferData)(GLuint buffer);
extern void (AWGL_API* InvalidateBufferSubData)(GLuint buffer, GLintptr offset, GLsizeiptr length);
extern void (AWGL_API* InvalidateFramebuffer)(GLenum target, GLsizei numAttachments, const GLenum * attachments);
extern void (AWGL_API* InvalidateSubFramebuffer)(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
extern void (AWGL_API* InvalidateTexImage)(GLuint texture, GLint level);
extern void (AWGL_API* InvalidateTexSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
extern void (AWGL_API* MultiDrawArraysIndirect)(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride);
extern void (AWGL_API* MultiDrawElementsIndirect)(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride);
extern void (AWGL_API* ObjectLabel)(GLenum identifier, GLuint name, GLsizei length, const GLchar * label);
extern void (AWGL_API* ObjectPtrLabel)(const void * ptr, GLsizei length, const GLchar * label);
extern void (AWGL_API* PopDebugGroup)(void);
extern void (AWGL_API* PushDebugGroup)(GLenum source, GLuint id, GLsizei length, const GLchar * message);
extern void (AWGL_API* ShaderStorageBlockBinding)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
extern void (AWGL_API* TexBufferRange)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
extern void (AWGL_API* TexStorage2DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
extern void (AWGL_API* TexStorage3DMultisample)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
extern void (AWGL_API* TextureView)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
extern void (AWGL_API* VertexAttribBinding)(GLuint attribindex, GLuint bindingindex);
extern void (AWGL_API* VertexAttribFormat)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
extern void (AWGL_API* VertexAttribIFormat)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
extern void (AWGL_API* VertexAttribLFormat)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
extern void (AWGL_API* VertexBindingDivisor)(GLuint bindingindex, GLuint divisor);

/* gl version 4.4 */
extern void (AWGL_API* BindBuffersBase)(GLenum target, GLuint first, GLsizei count, const GLuint * buffers);
extern void (AWGL_API* BindBuffersRange)(GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes);
extern void (AWGL_API* BindImageTextures)(GLuint first, GLsizei count, const GLuint * textures);
extern void (AWGL_API* BindSamplers)(GLuint first, GLsizei count, const GLuint * samplers);
extern void (AWGL_API* BindTextures)(GLuint first, GLsizei count, const GLuint * textures);
extern void (AWGL_API* BindVertexBuffers)(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);
extern void (AWGL_API* BufferStorage)(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags);
extern void (AWGL_API* ClearTexImage)(GLuint texture, GLint level, GLenum format, GLenum type, const void * data);
extern void (AWGL_API* ClearTexSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data);

/* gl version 4.5 */
extern void (AWGL_API* BindTextureUnit)(GLuint unit, GLuint texture);
extern void (AWGL_API* BlitNamedFramebuffer)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
extern GLenum (AWGL_API* CheckNamedFramebufferStatus)(GLuint framebuffer, GLenum target);
extern void (AWGL_API* ClearNamedBufferData)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data);
extern void (AWGL_API* ClearNamedBufferSubData)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data);
extern void (AWGL_API* ClearNamedFramebufferfi)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat depth, GLint stencil);
extern void (AWGL_API* ClearNamedFramebufferfv)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value);
extern void (AWGL_API* ClearNamedFramebufferiv)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value);
extern void (AWGL_API* ClearNamedFramebufferuiv)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value);
extern void (AWGL_API* ClipControl)(GLenum origin, GLenum depth);
extern void (AWGL_API* CompressedTextureSubImage1D)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data);
extern void (AWGL_API* CompressedTextureSubImage2D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data);
extern void (AWGL_API* CompressedTextureSubImage3D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data);
extern void (AWGL_API* CopyNamedBufferSubData)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
extern void (AWGL_API* CopyTextureSubImage1D)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
extern void (AWGL_API* CopyTextureSubImage2D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern void (AWGL_API* CopyTextureSubImage3D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
extern void (AWGL_API* CreateBuffers)(GLsizei n, GLuint * buffers);
extern void (AWGL_API* CreateFramebuffers)(GLsizei n, GLuint * framebuffers);
extern void (AWGL_API* CreateProgramPipelines)(GLsizei n, GLuint * pipelines);
extern void (AWGL_API* CreateQueries)(GLenum target, GLsizei n, GLuint * ids);
extern void (AWGL_API* CreateRenderbuffers)(GLsizei n, GLuint * renderbuffers);
extern void (AWGL_API* CreateSamplers)(GLsizei n, GLuint * samplers);
extern void (AWGL_API* CreateTextures)(GLenum target, GLsizei n, GLuint * textures);
extern void (AWGL_API* CreateTransformFeedbacks)(GLsizei n, GLuint * ids);
extern void (AWGL_API* CreateVertexArrays)(GLsizei n, GLuint * arrays);
extern void (AWGL_API* DisableVertexArrayAttrib)(GLuint vaobj, GLuint index);
extern void (AWGL_API* EnableVertexArrayAttrib)(GLuint vaobj, GLuint index);
extern void (AWGL_API* FlushMappedNamedBufferRange)(GLuint buffer, GLintptr offset, GLsizeiptr length);
extern void (AWGL_API* GenerateTextureMipmap)(GLuint texture);
extern void (AWGL_API* GetCompressedTextureImage)(GLuint texture, GLint level, GLsizei bufSize, void * pixels);
extern void (AWGL_API* GetCompressedTextureSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels);
extern GLenum (AWGL_API* GetGraphicsResetStatus)(void);
extern void (AWGL_API* GetNamedBufferParameteri64v)(GLuint buffer, GLenum pname, GLint64 * params);
extern void (AWGL_API* GetNamedBufferParameteriv)(GLuint buffer, GLenum pname, GLint * params);
extern void (AWGL_API* GetNamedBufferPointerv)(GLuint buffer, GLenum pname, void ** params);
extern void (AWGL_API* GetNamedBufferSubData)(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data);
extern void (AWGL_API* GetNamedFramebufferAttachmentParameteriv)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params);
extern void (AWGL_API* GetNamedFramebufferParameteriv)(GLuint framebuffer, GLenum pname, GLint * param);
extern void (AWGL_API* GetNamedRenderbufferParameteriv)(GLuint renderbuffer, GLenum pname, GLint * params);
extern void (AWGL_API* GetQueryBufferObjecti64v)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
extern void (AWGL_API* GetQueryBufferObjectiv)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
extern void (AWGL_API* GetQueryBufferObjectui64v)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
extern void (AWGL_API* GetQueryBufferObjectuiv)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
extern void (AWGL_API* GetTextureImage)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
extern void (AWGL_API* GetTextureLevelParameterfv)(GLuint texture, GLint level, GLenum pname, GLfloat * params);
extern void (AWGL_API* GetTextureLevelParameteriv)(GLuint texture, GLint level, GLenum pname, GLint * params);
extern void (AWGL_API* GetTextureParameterIiv)(GLuint texture, GLenum pname, GLint * params);
extern void (AWGL_API* GetTextureParameterIuiv)(GLuint texture, GLenum pname, GLuint * params);
extern void (AWGL_API* GetTextureParameterfv)(GLuint texture, GLenum pname, GLfloat * params);
extern void (AWGL_API* GetTextureParameteriv)(GLuint texture, GLenum pname, GLint * params);
extern void (AWGL_API* GetTextureSubImage)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
extern void (AWGL_API* GetTransformFeedbacki64_v)(GLuint xfb, GLenum pname, GLuint index, GLint64 * param);
extern void (AWGL_API* GetTransformFeedbacki_v)(GLuint xfb, GLenum pname, GLuint index, GLint * param);
extern void (AWGL_API* GetTransformFeedbackiv)(GLuint xfb, GLenum pname, GLint * param);
extern void (AWGL_API* GetVertexArrayIndexed64iv)(GLuint vaobj, GLuint index, GLenum pname, GLint64 * param);
extern void (AWGL_API* GetVertexArrayIndexediv)(GLuint vaobj, GLuint index, GLenum pname, GLint * param);
extern void (AWGL_API* GetVertexArrayiv)(GLuint vaobj, GLenum pname, GLint * param);
extern void (AWGL_API* GetnCompressedTexImage)(GLenum target, GLint lod, GLsizei bufSize, void * pixels);
extern void (AWGL_API* GetnTexImage)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels);
extern void (AWGL_API* GetnUniformdv)(GLuint program, GLint location, GLsizei bufSize, GLdouble * params);
extern void (AWGL_API* GetnUniformfv)(GLuint program, GLint location, GLsizei bufSize, GLfloat * params);
extern void (AWGL_API* GetnUniformiv)(GLuint program, GLint location, GLsizei bufSize, GLint * params);
extern void (AWGL_API* GetnUniformuiv)(GLuint program, GLint location, GLsizei bufSize, GLuint * params);
extern void (AWGL_API* InvalidateNamedFramebufferData)(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments);
extern void (AWGL_API* InvalidateNamedFramebufferSubData)(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height);
extern void * (AWGL_API* MapNamedBuffer)(GLuint buffer, GLenum access);
extern void * (AWGL_API* MapNamedBufferRange)(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
extern void (AWGL_API* MemoryBarrierByRegion)(GLbitfield barriers);
extern void (AWGL_API* NamedBufferData)(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage);
extern void (AWGL_API* NamedBufferStorage)(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags);
extern void (AWGL_API* NamedBufferSubData)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data);
extern void (AWGL_API* NamedFramebufferDrawBuffer)(GLuint framebuffer, GLenum buf);
extern void (AWGL_API* NamedFramebufferDrawBuffers)(GLuint framebuffer, GLsizei n, const GLenum * bufs);
extern void (AWGL_API* NamedFramebufferParameteri)(GLuint framebuffer, GLenum pname, GLint param);
extern void (AWGL_API* NamedFramebufferReadBuffer)(GLuint framebuffer, GLenum src);
extern void (AWGL_API* NamedFramebufferRenderbuffer)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
extern void (AWGL_API* NamedFramebufferTexture)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
extern void (AWGL_API* NamedFramebufferTextureLayer)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
extern void (AWGL_API* NamedRenderbufferStorage)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
extern void (AWGL_API* NamedRenderbufferStorageMultisample)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
extern void (AWGL_API* ReadnPixels)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data);
extern void (AWGL_API* TextureBarrier)(void);
extern void (AWGL_API* TextureBuffer)(GLuint texture, GLenum internalformat, GLuint buffer);
extern void (AWGL_API* TextureBufferRange)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
extern void (AWGL_API* TextureParameterIiv)(GLuint texture, GLenum pname, const GLint * params);
extern void (AWGL_API* TextureParameterIuiv)(GLuint texture, GLenum pname, const GLuint * params);
extern void (AWGL_API* TextureParameterf)(GLuint texture, GLenum pname, GLfloat param);
extern void (AWGL_API* TextureParameterfv)(GLuint texture, GLenum pname, const GLfloat * param);
extern void (AWGL_API* TextureParameteri)(GLuint texture, GLenum pname, GLint param);
extern void (AWGL_API* TextureParameteriv)(GLuint texture, GLenum pname, const GLint * param);
extern void (AWGL_API* TextureStorage1D)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
extern void (AWGL_API* TextureStorage2D)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
extern void (AWGL_API* TextureStorage2DMultisample)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
extern void (AWGL_API* TextureStorage3D)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
extern void (AWGL_API* TextureStorage3DMultisample)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
extern void (AWGL_API* TextureSubImage1D)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels);
extern void (AWGL_API* TextureSubImage2D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels);
extern void (AWGL_API* TextureSubImage3D)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels);
extern void (AWGL_API* TransformFeedbackBufferBase)(GLuint xfb, GLuint index, GLuint buffer);
extern void (AWGL_API* TransformFeedbackBufferRange)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
extern GLboolean (AWGL_API* UnmapNamedBuffer)(GLuint buffer);
extern void (AWGL_API* VertexArrayAttribBinding)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
extern void (AWGL_API* VertexArrayAttribFormat)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
extern void (AWGL_API* VertexArrayAttribIFormat)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
extern void (AWGL_API* VertexArrayAttribLFormat)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
extern void (AWGL_API* VertexArrayBindingDivisor)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
extern void (AWGL_API* VertexArrayElementBuffer)(GLuint vaobj, GLuint buffer);
extern void (AWGL_API* VertexArrayVertexBuffer)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
extern void (AWGL_API* VertexArrayVertexBuffers)(GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);
} //namespace _impl

/* gl version 1.0 */
inline void get_pointerv(GLenum pname, void ** params)
{
	_impl::GetPointerv(pname, params);
}

/* gl version 4.0 */
inline void begin_query_indexed(GLenum target, GLuint index, GLuint id)
{
	_impl::BeginQueryIndexed(target, index, id);
}
inline void bind_transform_feedback(GLenum target, GLuint id)
{
	_impl::BindTransformFeedback(target, id);
}
inline void blend_equation_separatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha)
{
	_impl::BlendEquationSeparatei(buf, modeRGB, modeAlpha);
}
inline void blend_equationi(GLuint buf, GLenum mode)
{
	_impl::BlendEquationi(buf, mode);
}
inline void blend_func_separatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
{
	_impl::BlendFuncSeparatei(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
}
inline void blend_funci(GLuint buf, GLenum src, GLenum dst)
{
	_impl::BlendFunci(buf, src, dst);
}
inline void delete_transform_feedbacks(GLsizei n, const GLuint * ids)
{
	_impl::DeleteTransformFeedbacks(n, ids);
}
inline void draw_arrays_indirect(GLenum mode, const void * indirect)
{
	_impl::DrawArraysIndirect(mode, indirect);
}
inline void draw_elements_indirect(GLenum mode, GLenum type, const void * indirect)
{
	_impl::DrawElementsIndirect(mode, type, indirect);
}
inline void draw_transform_feedback(GLenum mode, GLuint id)
{
	_impl::DrawTransformFeedback(mode, id);
}
inline void draw_transform_feedback_stream(GLenum mode, GLuint id, GLuint stream)
{
	_impl::DrawTransformFeedbackStream(mode, id, stream);
}
inline void end_query_indexed(GLenum target, GLuint index)
{
	_impl::EndQueryIndexed(target, index);
}
inline void gen_transform_feedbacks(GLsizei n, GLuint * ids)
{
	_impl::GenTransformFeedbacks(n, ids);
}
inline void get_active_subroutine_name(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name)
{
	_impl::GetActiveSubroutineName(program, shadertype, index, bufsize, length, name);
}
inline void get_active_subroutine_uniform_name(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei * length, GLchar * name)
{
	_impl::GetActiveSubroutineUniformName(program, shadertype, index, bufsize, length, name);
}
inline void get_active_subroutine_uniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint * values)
{
	_impl::GetActiveSubroutineUniformiv(program, shadertype, index, pname, values);
}
inline void get_program_stageiv(GLuint program, GLenum shadertype, GLenum pname, GLint * values)
{
	_impl::GetProgramStageiv(program, shadertype, pname, values);
}
inline void get_query_indexediv(GLenum target, GLuint index, GLenum pname, GLint * params)
{
	_impl::GetQueryIndexediv(target, index, pname, params);
}
inline GLuint get_subroutine_index(GLuint program, GLenum shadertype, const GLchar * name)
{
	return _impl::GetSubroutineIndex(program, shadertype, name);
}
inline GLint get_subroutine_uniform_location(GLuint program, GLenum shadertype, const GLchar * name)
{
	return _impl::GetSubroutineUniformLocation(program, shadertype, name);
}
inline void get_uniform_subroutineuiv(GLenum shadertype, GLint location, GLuint * params)
{
	_impl::GetUniformSubroutineuiv(shadertype, location, params);
}
inline void get_uniformdv(GLuint program, GLint location, GLdouble * params)
{
	_impl::GetUniformdv(program, location, params);
}
inline GLboolean is_transform_feedback(GLuint id)
{
	return _impl::IsTransformFeedback(id);
}
inline void min_sample_shading(GLfloat value)
{
	_impl::MinSampleShading(value);
}
inline void patch_parameterfv(GLenum pname, const GLfloat * values)
{
	_impl::PatchParameterfv(pname, values);
}
inline void patch_parameteri(GLenum pname, GLint value)
{
	_impl::PatchParameteri(pname, value);
}
inline void pause_transform_feedback(void)
{
	_impl::PauseTransformFeedback();
}
inline void resume_transform_feedback(void)
{
	_impl::ResumeTransformFeedback();
}
inline void uniform1d(GLint location, GLdouble x)
{
	_impl::Uniform1d(location, x);
}
inline void uniform1dv(GLint location, GLsizei count, const GLdouble * value)
{
	_impl::Uniform1dv(location, count, value);
}
inline void uniform2d(GLint location, GLdouble x, GLdouble y)
{
	_impl::Uniform2d(location, x, y);
}
inline void uniform2dv(GLint location, GLsizei count, const GLdouble * value)
{
	_impl::Uniform2dv(location, count, value);
}
inline void uniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z)
{
	_impl::Uniform3d(location, x, y, z);
}
inline void uniform3dv(GLint location, GLsizei count, const GLdouble * value)
{
	_impl::Uniform3dv(location, count, value);
}
inline void uniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
	_impl::Uniform4d(location, x, y, z, w);
}
inline void uniform4dv(GLint location, GLsizei count, const GLdouble * value)
{
	_impl::Uniform4dv(location, count, value);
}
inline void uniform_matrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::UniformMatrix2dv(location, count, transpose, value);
}
inline void uniform_matrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::UniformMatrix2x3dv(location, count, transpose, value);
}
inline void uniform_matrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::UniformMatrix2x4dv(location, count, transpose, value);
}
inline void uniform_matrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::UniformMatrix3dv(location, count, transpose, value);
}
inline void uniform_matrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::UniformMatrix3x2dv(location, count, transpose, value);
}
inline void uniform_matrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::UniformMatrix3x4dv(location, count, transpose, value);
}
inline void uniform_matrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::UniformMatrix4dv(location, count, transpose, value);
}
inline void uniform_matrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::UniformMatrix4x2dv(location, count, transpose, value);
}
inline void uniform_matrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::UniformMatrix4x3dv(location, count, transpose, value);
}
inline void uniform_subroutinesuiv(GLenum shadertype, GLsizei count, const GLuint * indices)
{
	_impl::UniformSubroutinesuiv(shadertype, count, indices);
}

/* gl version 4.1 */
inline void active_shader_program(GLuint pipeline, GLuint program)
{
	_impl::ActiveShaderProgram(pipeline, program);
}
inline void bind_program_pipeline(GLuint pipeline)
{
	_impl::BindProgramPipeline(pipeline);
}
inline void clear_depthf(GLfloat d)
{
	_impl::ClearDepthf(d);
}
inline GLuint create_shader_programv(GLenum type, GLsizei count, const GLchar *const* strings)
{
	return _impl::CreateShaderProgramv(type, count, strings);
}
inline void delete_program_pipelines(GLsizei n, const GLuint * pipelines)
{
	_impl::DeleteProgramPipelines(n, pipelines);
}
inline void depth_range_arrayv(GLuint first, GLsizei count, const GLdouble * v)
{
	_impl::DepthRangeArrayv(first, count, v);
}
inline void depth_range_indexed(GLuint index, GLdouble n, GLdouble f)
{
	_impl::DepthRangeIndexed(index, n, f);
}
inline void depth_rangef(GLfloat n, GLfloat f)
{
	_impl::DepthRangef(n, f);
}
inline void gen_program_pipelines(GLsizei n, GLuint * pipelines)
{
	_impl::GenProgramPipelines(n, pipelines);
}
inline void get_doublei_v(GLenum target, GLuint index, GLdouble * data)
{
	_impl::GetDoublei_v(target, index, data);
}
inline void get_floati_v(GLenum target, GLuint index, GLfloat * data)
{
	_impl::GetFloati_v(target, index, data);
}
inline void get_program_binary(GLuint program, GLsizei bufSize, GLsizei * length, GLenum * binaryFormat, void * binary)
{
	_impl::GetProgramBinary(program, bufSize, length, binaryFormat, binary);
}
inline void get_program_pipeline_info_log(GLuint pipeline, GLsizei bufSize, GLsizei * length, GLchar * infoLog)
{
	_impl::GetProgramPipelineInfoLog(pipeline, bufSize, length, infoLog);
}
inline void get_program_pipelineiv(GLuint pipeline, GLenum pname, GLint * params)
{
	_impl::GetProgramPipelineiv(pipeline, pname, params);
}
inline void get_shader_precision_format(GLenum shadertype, GLenum precisiontype, GLint * range, GLint * precision)
{
	_impl::GetShaderPrecisionFormat(shadertype, precisiontype, range, precision);
}
inline void get_vertex_attrib_ldv(GLuint index, GLenum pname, GLdouble * params)
{
	_impl::GetVertexAttribLdv(index, pname, params);
}
inline GLboolean is_program_pipeline(GLuint pipeline)
{
	return _impl::IsProgramPipeline(pipeline);
}
inline void program_binary(GLuint program, GLenum binaryFormat, const void * binary, GLsizei length)
{
	_impl::ProgramBinary(program, binaryFormat, binary, length);
}
inline void program_parameteri(GLuint program, GLenum pname, GLint value)
{
	_impl::ProgramParameteri(program, pname, value);
}
inline void program_uniform1d(GLuint program, GLint location, GLdouble v0)
{
	_impl::ProgramUniform1d(program, location, v0);
}
inline void program_uniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
	_impl::ProgramUniform1dv(program, location, count, value);
}
inline void program_uniform1f(GLuint program, GLint location, GLfloat v0)
{
	_impl::ProgramUniform1f(program, location, v0);
}
inline void program_uniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
	_impl::ProgramUniform1fv(program, location, count, value);
}
inline void program_uniform1i(GLuint program, GLint location, GLint v0)
{
	_impl::ProgramUniform1i(program, location, v0);
}
inline void program_uniform1iv(GLuint program, GLint location, GLsizei count, const GLint * value)
{
	_impl::ProgramUniform1iv(program, location, count, value);
}
inline void program_uniform1ui(GLuint program, GLint location, GLuint v0)
{
	_impl::ProgramUniform1ui(program, location, v0);
}
inline void program_uniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint * value)
{
	_impl::ProgramUniform1uiv(program, location, count, value);
}
inline void program_uniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1)
{
	_impl::ProgramUniform2d(program, location, v0, v1);
}
inline void program_uniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
	_impl::ProgramUniform2dv(program, location, count, value);
}
inline void program_uniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1)
{
	_impl::ProgramUniform2f(program, location, v0, v1);
}
inline void program_uniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
	_impl::ProgramUniform2fv(program, location, count, value);
}
inline void program_uniform2i(GLuint program, GLint location, GLint v0, GLint v1)
{
	_impl::ProgramUniform2i(program, location, v0, v1);
}
inline void program_uniform2iv(GLuint program, GLint location, GLsizei count, const GLint * value)
{
	_impl::ProgramUniform2iv(program, location, count, value);
}
inline void program_uniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1)
{
	_impl::ProgramUniform2ui(program, location, v0, v1);
}
inline void program_uniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint * value)
{
	_impl::ProgramUniform2uiv(program, location, count, value);
}
inline void program_uniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2)
{
	_impl::ProgramUniform3d(program, location, v0, v1, v2);
}
inline void program_uniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
	_impl::ProgramUniform3dv(program, location, count, value);
}
inline void program_uniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
{
	_impl::ProgramUniform3f(program, location, v0, v1, v2);
}
inline void program_uniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
	_impl::ProgramUniform3fv(program, location, count, value);
}
inline void program_uniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)
{
	_impl::ProgramUniform3i(program, location, v0, v1, v2);
}
inline void program_uniform3iv(GLuint program, GLint location, GLsizei count, const GLint * value)
{
	_impl::ProgramUniform3iv(program, location, count, value);
}
inline void program_uniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)
{
	_impl::ProgramUniform3ui(program, location, v0, v1, v2);
}
inline void program_uniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint * value)
{
	_impl::ProgramUniform3uiv(program, location, count, value);
}
inline void program_uniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)
{
	_impl::ProgramUniform4d(program, location, v0, v1, v2, v3);
}
inline void program_uniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble * value)
{
	_impl::ProgramUniform4dv(program, location, count, value);
}
inline void program_uniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
{
	_impl::ProgramUniform4f(program, location, v0, v1, v2, v3);
}
inline void program_uniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat * value)
{
	_impl::ProgramUniform4fv(program, location, count, value);
}
inline void program_uniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
{
	_impl::ProgramUniform4i(program, location, v0, v1, v2, v3);
}
inline void program_uniform4iv(GLuint program, GLint location, GLsizei count, const GLint * value)
{
	_impl::ProgramUniform4iv(program, location, count, value);
}
inline void program_uniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
{
	_impl::ProgramUniform4ui(program, location, v0, v1, v2, v3);
}
inline void program_uniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint * value)
{
	_impl::ProgramUniform4uiv(program, location, count, value);
}
inline void program_uniform_matrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::ProgramUniformMatrix2dv(program, location, count, transpose, value);
}
inline void program_uniform_matrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	_impl::ProgramUniformMatrix2fv(program, location, count, transpose, value);
}
inline void program_uniform_matrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::ProgramUniformMatrix2x3dv(program, location, count, transpose, value);
}
inline void program_uniform_matrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	_impl::ProgramUniformMatrix2x3fv(program, location, count, transpose, value);
}
inline void program_uniform_matrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::ProgramUniformMatrix2x4dv(program, location, count, transpose, value);
}
inline void program_uniform_matrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	_impl::ProgramUniformMatrix2x4fv(program, location, count, transpose, value);
}
inline void program_uniform_matrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::ProgramUniformMatrix3dv(program, location, count, transpose, value);
}
inline void program_uniform_matrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	_impl::ProgramUniformMatrix3fv(program, location, count, transpose, value);
}
inline void program_uniform_matrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::ProgramUniformMatrix3x2dv(program, location, count, transpose, value);
}
inline void program_uniform_matrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	_impl::ProgramUniformMatrix3x2fv(program, location, count, transpose, value);
}
inline void program_uniform_matrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::ProgramUniformMatrix3x4dv(program, location, count, transpose, value);
}
inline void program_uniform_matrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	_impl::ProgramUniformMatrix3x4fv(program, location, count, transpose, value);
}
inline void program_uniform_matrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::ProgramUniformMatrix4dv(program, location, count, transpose, value);
}
inline void program_uniform_matrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	_impl::ProgramUniformMatrix4fv(program, location, count, transpose, value);
}
inline void program_uniform_matrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::ProgramUniformMatrix4x2dv(program, location, count, transpose, value);
}
inline void program_uniform_matrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	_impl::ProgramUniformMatrix4x2fv(program, location, count, transpose, value);
}
inline void program_uniform_matrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble * value)
{
	_impl::ProgramUniformMatrix4x3dv(program, location, count, transpose, value);
}
inline void program_uniform_matrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat * value)
{
	_impl::ProgramUniformMatrix4x3fv(program, location, count, transpose, value);
}
inline void release_shader_compiler(void)
{
	_impl::ReleaseShaderCompiler();
}
inline void scissor_arrayv(GLuint first, GLsizei count, const GLint * v)
{
	_impl::ScissorArrayv(first, count, v);
}
inline void scissor_indexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)
{
	_impl::ScissorIndexed(index, left, bottom, width, height);
}
inline void scissor_indexedv(GLuint index, const GLint * v)
{
	_impl::ScissorIndexedv(index, v);
}
inline void shader_binary(GLsizei count, const GLuint * shaders, GLenum binaryformat, const void * binary, GLsizei length)
{
	_impl::ShaderBinary(count, shaders, binaryformat, binary, length);
}
inline void use_program_stages(GLuint pipeline, GLbitfield stages, GLuint program)
{
	_impl::UseProgramStages(pipeline, stages, program);
}
inline void validate_program_pipeline(GLuint pipeline)
{
	_impl::ValidateProgramPipeline(pipeline);
}
inline void vertex_attrib_l1d(GLuint index, GLdouble x)
{
	_impl::VertexAttribL1d(index, x);
}
inline void vertex_attrib_l1dv(GLuint index, const GLdouble * v)
{
	_impl::VertexAttribL1dv(index, v);
}
inline void vertex_attrib_l2d(GLuint index, GLdouble x, GLdouble y)
{
	_impl::VertexAttribL2d(index, x, y);
}
inline void vertex_attrib_l2dv(GLuint index, const GLdouble * v)
{
	_impl::VertexAttribL2dv(index, v);
}
inline void vertex_attrib_l3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)
{
	_impl::VertexAttribL3d(index, x, y, z);
}
inline void vertex_attrib_l3dv(GLuint index, const GLdouble * v)
{
	_impl::VertexAttribL3dv(index, v);
}
inline void vertex_attrib_l4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)
{
	_impl::VertexAttribL4d(index, x, y, z, w);
}
inline void vertex_attrib_l4dv(GLuint index, const GLdouble * v)
{
	_impl::VertexAttribL4dv(index, v);
}
inline void vertex_attrib_l_pointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void * pointer)
{
	_impl::VertexAttribLPointer(index, size, type, stride, pointer);
}
inline void viewport_arrayv(GLuint first, GLsizei count, const GLfloat * v)
{
	_impl::ViewportArrayv(first, count, v);
}
inline void viewport_indexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)
{
	_impl::ViewportIndexedf(index, x, y, w, h);
}
inline void viewport_indexedfv(GLuint index, const GLfloat * v)
{
	_impl::ViewportIndexedfv(index, v);
}

/* gl version 4.2 */
inline void bind_image_texture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)
{
	_impl::BindImageTexture(unit, texture, level, layered, layer, access, format);
}
inline void draw_arrays_instanced_base_instance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)
{
	_impl::DrawArraysInstancedBaseInstance(mode, first, count, instancecount, baseinstance);
}
inline void draw_elements_instanced_base_instance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLuint baseinstance)
{
	_impl::DrawElementsInstancedBaseInstance(mode, count, type, indices, instancecount, baseinstance);
}
inline void draw_elements_instanced_base_vertex_base_instance(GLenum mode, GLsizei count, GLenum type, const void * indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)
{
	_impl::DrawElementsInstancedBaseVertexBaseInstance(mode, count, type, indices, instancecount, basevertex, baseinstance);
}
inline void draw_transform_feedback_instanced(GLenum mode, GLuint id, GLsizei instancecount)
{
	_impl::DrawTransformFeedbackInstanced(mode, id, instancecount);
}
inline void draw_transform_feedback_stream_instanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount)
{
	_impl::DrawTransformFeedbackStreamInstanced(mode, id, stream, instancecount);
}
inline void get_active_atomic_counter_bufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint * params)
{
	_impl::GetActiveAtomicCounterBufferiv(program, bufferIndex, pname, params);
}
inline void get_internalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint * params)
{
	_impl::GetInternalformativ(target, internalformat, pname, bufSize, params);
}
inline void memory_barrier(GLbitfield barriers)
{
	_impl::MemoryBarrier(barriers);
}
inline void tex_storage1_d(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)
{
	_impl::TexStorage1D(target, levels, internalformat, width);
}
inline void tex_storage2_d(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
	_impl::TexStorage2D(target, levels, internalformat, width, height);
}
inline void tex_storage3_d(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
	_impl::TexStorage3D(target, levels, internalformat, width, height, depth);
}

/* gl version 4.3 */
inline void bind_vertex_buffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
	_impl::BindVertexBuffer(bindingindex, buffer, offset, stride);
}
inline void clear_buffer_data(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void * data)
{
	_impl::ClearBufferData(target, internalformat, format, type, data);
}
inline void clear_buffer_sub_data(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data)
{
	_impl::ClearBufferSubData(target, internalformat, offset, size, format, type, data);
}
inline void copy_image_sub_data(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)
{
	_impl::CopyImageSubData(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
}
inline void debug_message_callback(GLDEBUGPROC callback, const void * userParam)
{
	_impl::DebugMessageCallback(callback, userParam);
}
inline void debug_message_control(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint * ids, GLboolean enabled)
{
	_impl::DebugMessageControl(source, type, severity, count, ids, enabled);
}
inline void debug_message_insert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar * buf)
{
	_impl::DebugMessageInsert(source, type, id, severity, length, buf);
}
inline void dispatch_compute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)
{
	_impl::DispatchCompute(num_groups_x, num_groups_y, num_groups_z);
}
inline void dispatch_compute_indirect(GLintptr indirect)
{
	_impl::DispatchComputeIndirect(indirect);
}
inline void framebuffer_parameteri(GLenum target, GLenum pname, GLint param)
{
	_impl::FramebufferParameteri(target, pname, param);
}
inline GLuint get_debug_message_log(GLuint count, GLsizei bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog)
{
	return _impl::GetDebugMessageLog(count, bufSize, sources, types, ids, severities, lengths, messageLog);
}
inline void get_framebuffer_parameteriv(GLenum target, GLenum pname, GLint * params)
{
	_impl::GetFramebufferParameteriv(target, pname, params);
}
inline void get_internalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 * params)
{
	_impl::GetInternalformati64v(target, internalformat, pname, bufSize, params);
}
inline void get_object_label(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei * length, GLchar * label)
{
	_impl::GetObjectLabel(identifier, name, bufSize, length, label);
}
inline void get_object_ptr_label(const void * ptr, GLsizei bufSize, GLsizei * length, GLchar * label)
{
	_impl::GetObjectPtrLabel(ptr, bufSize, length, label);
}
inline void get_program_interfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint * params)
{
	_impl::GetProgramInterfaceiv(program, programInterface, pname, params);
}
inline GLuint get_program_resource_index(GLuint program, GLenum programInterface, const GLchar * name)
{
	return _impl::GetProgramResourceIndex(program, programInterface, name);
}
inline GLint get_program_resource_location(GLuint program, GLenum programInterface, const GLchar * name)
{
	return _impl::GetProgramResourceLocation(program, programInterface, name);
}
inline GLint get_program_resource_location_index(GLuint program, GLenum programInterface, const GLchar * name)
{
	return _impl::GetProgramResourceLocationIndex(program, programInterface, name);
}
inline void get_program_resource_name(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei * length, GLchar * name)
{
	_impl::GetProgramResourceName(program, programInterface, index, bufSize, length, name);
}
inline void get_program_resourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum * props, GLsizei bufSize, GLsizei * length, GLint * params)
{
	_impl::GetProgramResourceiv(program, programInterface, index, propCount, props, bufSize, length, params);
}
inline void invalidate_buffer_data(GLuint buffer)
{
	_impl::InvalidateBufferData(buffer);
}
inline void invalidate_buffer_sub_data(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
	_impl::InvalidateBufferSubData(buffer, offset, length);
}
inline void invalidate_framebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments)
{
	_impl::InvalidateFramebuffer(target, numAttachments, attachments);
}
inline void invalidate_sub_framebuffer(GLenum target, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
	_impl::InvalidateSubFramebuffer(target, numAttachments, attachments, x, y, width, height);
}
inline void invalidate_tex_image(GLuint texture, GLint level)
{
	_impl::InvalidateTexImage(texture, level);
}
inline void invalidate_tex_sub_image(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)
{
	_impl::InvalidateTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth);
}
inline void multi_draw_arrays_indirect(GLenum mode, const void * indirect, GLsizei drawcount, GLsizei stride)
{
	_impl::MultiDrawArraysIndirect(mode, indirect, drawcount, stride);
}
inline void multi_draw_elements_indirect(GLenum mode, GLenum type, const void * indirect, GLsizei drawcount, GLsizei stride)
{
	_impl::MultiDrawElementsIndirect(mode, type, indirect, drawcount, stride);
}
inline void object_label(GLenum identifier, GLuint name, GLsizei length, const GLchar * label)
{
	_impl::ObjectLabel(identifier, name, length, label);
}
inline void object_ptr_label(const void * ptr, GLsizei length, const GLchar * label)
{
	_impl::ObjectPtrLabel(ptr, length, label);
}
inline void pop_debug_group(void)
{
	_impl::PopDebugGroup();
}
inline void push_debug_group(GLenum source, GLuint id, GLsizei length, const GLchar * message)
{
	_impl::PushDebugGroup(source, id, length, message);
}
inline void shader_storage_block_binding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)
{
	_impl::ShaderStorageBlockBinding(program, storageBlockIndex, storageBlockBinding);
}
inline void tex_buffer_range(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
	_impl::TexBufferRange(target, internalformat, buffer, offset, size);
}
inline void tex_storage2_d_multisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
	_impl::TexStorage2DMultisample(target, samples, internalformat, width, height, fixedsamplelocations);
}
inline void tex_storage3_d_multisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
	_impl::TexStorage3DMultisample(target, samples, internalformat, width, height, depth, fixedsamplelocations);
}
inline void texture_view(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)
{
	_impl::TextureView(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
}
inline void vertex_attrib_binding(GLuint attribindex, GLuint bindingindex)
{
	_impl::VertexAttribBinding(attribindex, bindingindex);
}
inline void vertex_attrib_format(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
	_impl::VertexAttribFormat(attribindex, size, type, normalized, relativeoffset);
}
inline void vertex_attrib_i_format(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
	_impl::VertexAttribIFormat(attribindex, size, type, relativeoffset);
}
inline void vertex_attrib_l_format(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
	_impl::VertexAttribLFormat(attribindex, size, type, relativeoffset);
}
inline void vertex_binding_divisor(GLuint bindingindex, GLuint divisor)
{
	_impl::VertexBindingDivisor(bindingindex, divisor);
}

/* gl version 4.4 */
inline void bind_buffers_base(GLenum target, GLuint first, GLsizei count, const GLuint * buffers)
{
	_impl::BindBuffersBase(target, first, count, buffers);
}
inline void bind_buffers_range(GLenum target, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes)
{
	_impl::BindBuffersRange(target, first, count, buffers, offsets, sizes);
}
inline void bind_image_textures(GLuint first, GLsizei count, const GLuint * textures)
{
	_impl::BindImageTextures(first, count, textures);
}
inline void bind_samplers(GLuint first, GLsizei count, const GLuint * samplers)
{
	_impl::BindSamplers(first, count, samplers);
}
inline void bind_textures(GLuint first, GLsizei count, const GLuint * textures)
{
	_impl::BindTextures(first, count, textures);
}
inline void bind_vertex_buffers(GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides)
{
	_impl::BindVertexBuffers(first, count, buffers, offsets, strides);
}
inline void buffer_storage(GLenum target, GLsizeiptr size, const void * data, GLbitfield flags)
{
	_impl::BufferStorage(target, size, data, flags);
}
inline void clear_tex_image(GLuint texture, GLint level, GLenum format, GLenum type, const void * data)
{
	_impl::ClearTexImage(texture, level, format, type, data);
}
inline void clear_tex_sub_image(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * data)
{
	_impl::ClearTexSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
}

/* gl version 4.5 */
inline void bind_texture_unit(GLuint unit, GLuint texture)
{
	_impl::BindTextureUnit(unit, texture);
}
inline void blit_named_framebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
{
	_impl::BlitNamedFramebuffer(readFramebuffer, drawFramebuffer, srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
}
inline GLenum check_named_framebuffer_status(GLuint framebuffer, GLenum target)
{
	return _impl::CheckNamedFramebufferStatus(framebuffer, target);
}
inline void clear_named_buffer_data(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void * data)
{
	_impl::ClearNamedBufferData(buffer, internalformat, format, type, data);
}
inline void clear_named_buffer_sub_data(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void * data)
{
	_impl::ClearNamedBufferSubData(buffer, internalformat, offset, size, format, type, data);
}
inline void clear_named_framebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat depth, GLint stencil)
{
	_impl::ClearNamedFramebufferfi(framebuffer, buffer, drawbuffer, depth, stencil);
}
inline void clear_named_framebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat * value)
{
	_impl::ClearNamedFramebufferfv(framebuffer, buffer, drawbuffer, value);
}
inline void clear_named_framebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint * value)
{
	_impl::ClearNamedFramebufferiv(framebuffer, buffer, drawbuffer, value);
}
inline void clear_named_framebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint * value)
{
	_impl::ClearNamedFramebufferuiv(framebuffer, buffer, drawbuffer, value);
}
inline void clip_control(GLenum origin, GLenum depth)
{
	_impl::ClipControl(origin, depth);
}
inline void compressed_texture_sub_image1_d(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void * data)
{
	_impl::CompressedTextureSubImage1D(texture, level, xoffset, width, format, imageSize, data);
}
inline void compressed_texture_sub_image2_d(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void * data)
{
	_impl::CompressedTextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, imageSize, data);
}
inline void compressed_texture_sub_image3_d(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void * data)
{
	_impl::CompressedTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
}
inline void copy_named_buffer_sub_data(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
{
	_impl::CopyNamedBufferSubData(readBuffer, writeBuffer, readOffset, writeOffset, size);
}
inline void copy_texture_sub_image1_d(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
{
	_impl::CopyTextureSubImage1D(texture, level, xoffset, x, y, width);
}
inline void copy_texture_sub_image2_d(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
	_impl::CopyTextureSubImage2D(texture, level, xoffset, yoffset, x, y, width, height);
}
inline void copy_texture_sub_image3_d(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
{
	_impl::CopyTextureSubImage3D(texture, level, xoffset, yoffset, zoffset, x, y, width, height);
}
inline void create_buffers(GLsizei n, GLuint * buffers)
{
	_impl::CreateBuffers(n, buffers);
}
inline void create_framebuffers(GLsizei n, GLuint * framebuffers)
{
	_impl::CreateFramebuffers(n, framebuffers);
}
inline void create_program_pipelines(GLsizei n, GLuint * pipelines)
{
	_impl::CreateProgramPipelines(n, pipelines);
}
inline void create_queries(GLenum target, GLsizei n, GLuint * ids)
{
	_impl::CreateQueries(target, n, ids);
}
inline void create_renderbuffers(GLsizei n, GLuint * renderbuffers)
{
	_impl::CreateRenderbuffers(n, renderbuffers);
}
inline void create_samplers(GLsizei n, GLuint * samplers)
{
	_impl::CreateSamplers(n, samplers);
}
inline void create_textures(GLenum target, GLsizei n, GLuint * textures)
{
	_impl::CreateTextures(target, n, textures);
}
inline void create_transform_feedbacks(GLsizei n, GLuint * ids)
{
	_impl::CreateTransformFeedbacks(n, ids);
}
inline void create_vertex_arrays(GLsizei n, GLuint * arrays)
{
	_impl::CreateVertexArrays(n, arrays);
}
inline void disable_vertex_array_attrib(GLuint vaobj, GLuint index)
{
	_impl::DisableVertexArrayAttrib(vaobj, index);
}
inline void enable_vertex_array_attrib(GLuint vaobj, GLuint index)
{
	_impl::EnableVertexArrayAttrib(vaobj, index);
}
inline void flush_mapped_named_buffer_range(GLuint buffer, GLintptr offset, GLsizeiptr length)
{
	_impl::FlushMappedNamedBufferRange(buffer, offset, length);
}
inline void generate_texture_mipmap(GLuint texture)
{
	_impl::GenerateTextureMipmap(texture);
}
inline void get_compressed_texture_image(GLuint texture, GLint level, GLsizei bufSize, void * pixels)
{
	_impl::GetCompressedTextureImage(texture, level, bufSize, pixels);
}
inline void get_compressed_texture_sub_image(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void * pixels)
{
	_impl::GetCompressedTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, bufSize, pixels);
}
inline GLenum get_graphics_reset_status(void)
{
	return _impl::GetGraphicsResetStatus();
}
inline void get_named_buffer_parameteri64v(GLuint buffer, GLenum pname, GLint64 * params)
{
	_impl::GetNamedBufferParameteri64v(buffer, pname, params);
}
inline void get_named_buffer_parameteriv(GLuint buffer, GLenum pname, GLint * params)
{
	_impl::GetNamedBufferParameteriv(buffer, pname, params);
}
inline void get_named_buffer_pointerv(GLuint buffer, GLenum pname, void ** params)
{
	_impl::GetNamedBufferPointerv(buffer, pname, params);
}
inline void get_named_buffer_sub_data(GLuint buffer, GLintptr offset, GLsizeiptr size, void * data)
{
	_impl::GetNamedBufferSubData(buffer, offset, size, data);
}
inline void get_named_framebuffer_attachment_parameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint * params)
{
	_impl::GetNamedFramebufferAttachmentParameteriv(framebuffer, attachment, pname, params);
}
inline void get_named_framebuffer_parameteriv(GLuint framebuffer, GLenum pname, GLint * param)
{
	_impl::GetNamedFramebufferParameteriv(framebuffer, pname, param);
}
inline void get_named_renderbuffer_parameteriv(GLuint renderbuffer, GLenum pname, GLint * params)
{
	_impl::GetNamedRenderbufferParameteriv(renderbuffer, pname, params);
}
inline void get_query_buffer_objecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
	_impl::GetQueryBufferObjecti64v(id, buffer, pname, offset);
}
inline void get_query_buffer_objectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
	_impl::GetQueryBufferObjectiv(id, buffer, pname, offset);
}
inline void get_query_buffer_objectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
	_impl::GetQueryBufferObjectui64v(id, buffer, pname, offset);
}
inline void get_query_buffer_objectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)
{
	_impl::GetQueryBufferObjectuiv(id, buffer, pname, offset);
}
inline void get_texture_image(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels)
{
	_impl::GetTextureImage(texture, level, format, type, bufSize, pixels);
}
inline void get_texture_level_parameterfv(GLuint texture, GLint level, GLenum pname, GLfloat * params)
{
	_impl::GetTextureLevelParameterfv(texture, level, pname, params);
}
inline void get_texture_level_parameteriv(GLuint texture, GLint level, GLenum pname, GLint * params)
{
	_impl::GetTextureLevelParameteriv(texture, level, pname, params);
}
inline void get_texture_parameter_iiv(GLuint texture, GLenum pname, GLint * params)
{
	_impl::GetTextureParameterIiv(texture, pname, params);
}
inline void get_texture_parameter_iuiv(GLuint texture, GLenum pname, GLuint * params)
{
	_impl::GetTextureParameterIuiv(texture, pname, params);
}
inline void get_texture_parameterfv(GLuint texture, GLenum pname, GLfloat * params)
{
	_impl::GetTextureParameterfv(texture, pname, params);
}
inline void get_texture_parameteriv(GLuint texture, GLenum pname, GLint * params)
{
	_impl::GetTextureParameteriv(texture, pname, params);
}
inline void get_texture_sub_image(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void * pixels)
{
	_impl::GetTextureSubImage(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, bufSize, pixels);
}
inline void get_transform_feedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 * param)
{
	_impl::GetTransformFeedbacki64_v(xfb, pname, index, param);
}
inline void get_transform_feedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint * param)
{
	_impl::GetTransformFeedbacki_v(xfb, pname, index, param);
}
inline void get_transform_feedbackiv(GLuint xfb, GLenum pname, GLint * param)
{
	_impl::GetTransformFeedbackiv(xfb, pname, param);
}
inline void get_vertex_array_indexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 * param)
{
	_impl::GetVertexArrayIndexed64iv(vaobj, index, pname, param);
}
inline void get_vertex_array_indexediv(GLuint vaobj, GLuint index, GLenum pname, GLint * param)
{
	_impl::GetVertexArrayIndexediv(vaobj, index, pname, param);
}
inline void get_vertex_arrayiv(GLuint vaobj, GLenum pname, GLint * param)
{
	_impl::GetVertexArrayiv(vaobj, pname, param);
}
inline void getn_compressed_tex_image(GLenum target, GLint lod, GLsizei bufSize, void * pixels)
{
	_impl::GetnCompressedTexImage(target, lod, bufSize, pixels);
}
inline void getn_tex_image(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void * pixels)
{
	_impl::GetnTexImage(target, level, format, type, bufSize, pixels);
}
inline void getn_uniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble * params)
{
	_impl::GetnUniformdv(program, location, bufSize, params);
}
inline void getn_uniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat * params)
{
	_impl::GetnUniformfv(program, location, bufSize, params);
}
inline void getn_uniformiv(GLuint program, GLint location, GLsizei bufSize, GLint * params)
{
	_impl::GetnUniformiv(program, location, bufSize, params);
}
inline void getn_uniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint * params)
{
	_impl::GetnUniformuiv(program, location, bufSize, params);
}
inline void invalidate_named_framebuffer_data(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments)
{
	_impl::InvalidateNamedFramebufferData(framebuffer, numAttachments, attachments);
}
inline void invalidate_named_framebuffer_sub_data(GLuint framebuffer, GLsizei numAttachments, const GLenum * attachments, GLint x, GLint y, GLsizei width, GLsizei height)
{
	_impl::InvalidateNamedFramebufferSubData(framebuffer, numAttachments, attachments, x, y, width, height);
}
inline void * map_named_buffer(GLuint buffer, GLenum access)
{
	return _impl::MapNamedBuffer(buffer, access);
}
inline void * map_named_buffer_range(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)
{
	return _impl::MapNamedBufferRange(buffer, offset, length, access);
}
inline void memory_barrier_by_region(GLbitfield barriers)
{
	_impl::MemoryBarrierByRegion(barriers);
}
inline void named_buffer_data(GLuint buffer, GLsizeiptr size, const void * data, GLenum usage)
{
	_impl::NamedBufferData(buffer, size, data, usage);
}
inline void named_buffer_storage(GLuint buffer, GLsizeiptr size, const void * data, GLbitfield flags)
{
	_impl::NamedBufferStorage(buffer, size, data, flags);
}
inline void named_buffer_sub_data(GLuint buffer, GLintptr offset, GLsizeiptr size, const void * data)
{
	_impl::NamedBufferSubData(buffer, offset, size, data);
}
inline void named_framebuffer_draw_buffer(GLuint framebuffer, GLenum buf)
{
	_impl::NamedFramebufferDrawBuffer(framebuffer, buf);
}
inline void named_framebuffer_draw_buffers(GLuint framebuffer, GLsizei n, const GLenum * bufs)
{
	_impl::NamedFramebufferDrawBuffers(framebuffer, n, bufs);
}
inline void named_framebuffer_parameteri(GLuint framebuffer, GLenum pname, GLint param)
{
	_impl::NamedFramebufferParameteri(framebuffer, pname, param);
}
inline void named_framebuffer_read_buffer(GLuint framebuffer, GLenum src)
{
	_impl::NamedFramebufferReadBuffer(framebuffer, src);
}
inline void named_framebuffer_renderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
{
	_impl::NamedFramebufferRenderbuffer(framebuffer, attachment, renderbuffertarget, renderbuffer);
}
inline void named_framebuffer_texture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)
{
	_impl::NamedFramebufferTexture(framebuffer, attachment, texture, level);
}
inline void named_framebuffer_texture_layer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)
{
	_impl::NamedFramebufferTextureLayer(framebuffer, attachment, texture, level, layer);
}
inline void named_renderbuffer_storage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)
{
	_impl::NamedRenderbufferStorage(renderbuffer, internalformat, width, height);
}
inline void named_renderbuffer_storage_multisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
{
	_impl::NamedRenderbufferStorageMultisample(renderbuffer, samples, internalformat, width, height);
}
inline void readn_pixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void * data)
{
	_impl::ReadnPixels(x, y, width, height, format, type, bufSize, data);
}
inline void texture_barrier(void)
{
	_impl::TextureBarrier();
}
inline void texture_buffer(GLuint texture, GLenum internalformat, GLuint buffer)
{
	_impl::TextureBuffer(texture, internalformat, buffer);
}
inline void texture_buffer_range(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
	_impl::TextureBufferRange(texture, internalformat, buffer, offset, size);
}
inline void texture_parameter_iiv(GLuint texture, GLenum pname, const GLint * params)
{
	_impl::TextureParameterIiv(texture, pname, params);
}
inline void texture_parameter_iuiv(GLuint texture, GLenum pname, const GLuint * params)
{
	_impl::TextureParameterIuiv(texture, pname, params);
}
inline void texture_parameterf(GLuint texture, GLenum pname, GLfloat param)
{
	_impl::TextureParameterf(texture, pname, param);
}
inline void texture_parameterfv(GLuint texture, GLenum pname, const GLfloat * param)
{
	_impl::TextureParameterfv(texture, pname, param);
}
inline void texture_parameteri(GLuint texture, GLenum pname, GLint param)
{
	_impl::TextureParameteri(texture, pname, param);
}
inline void texture_parameteriv(GLuint texture, GLenum pname, const GLint * param)
{
	_impl::TextureParameteriv(texture, pname, param);
}
inline void texture_storage1_d(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width)
{
	_impl::TextureStorage1D(texture, levels, internalformat, width);
}
inline void texture_storage2_d(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)
{
	_impl::TextureStorage2D(texture, levels, internalformat, width, height);
}
inline void texture_storage2_d_multisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
{
	_impl::TextureStorage2DMultisample(texture, samples, internalformat, width, height, fixedsamplelocations);
}
inline void texture_storage3_d(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)
{
	_impl::TextureStorage3D(texture, levels, internalformat, width, height, depth);
}
inline void texture_storage3_d_multisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
{
	_impl::TextureStorage3DMultisample(texture, samples, internalformat, width, height, depth, fixedsamplelocations);
}
inline void texture_sub_image1_d(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void * pixels)
{
	_impl::TextureSubImage1D(texture, level, xoffset, width, format, type, pixels);
}
inline void texture_sub_image2_d(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void * pixels)
{
	_impl::TextureSubImage2D(texture, level, xoffset, yoffset, width, height, format, type, pixels);
}
inline void texture_sub_image3_d(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void * pixels)
{
	_impl::TextureSubImage3D(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
}
inline void transform_feedback_buffer_base(GLuint xfb, GLuint index, GLuint buffer)
{
	_impl::TransformFeedbackBufferBase(xfb, index, buffer);
}
inline void transform_feedback_buffer_range(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
{
	_impl::TransformFeedbackBufferRange(xfb, index, buffer, offset, size);
}
inline GLboolean unmap_named_buffer(GLuint buffer)
{
	return _impl::UnmapNamedBuffer(buffer);
}
inline void vertex_array_attrib_binding(GLuint vaobj, GLuint attribindex, GLuint bindingindex)
{
	_impl::VertexArrayAttribBinding(vaobj, attribindex, bindingindex);
}
inline void vertex_array_attrib_format(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)
{
	_impl::VertexArrayAttribFormat(vaobj, attribindex, size, type, normalized, relativeoffset);
}
inline void vertex_array_attrib_i_format(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
	_impl::VertexArrayAttribIFormat(vaobj, attribindex, size, type, relativeoffset);
}
inline void vertex_array_attrib_l_format(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)
{
	_impl::VertexArrayAttribLFormat(vaobj, attribindex, size, type, relativeoffset);
}
inline void vertex_array_binding_divisor(GLuint vaobj, GLuint bindingindex, GLuint divisor)
{
	_impl::VertexArrayBindingDivisor(vaobj, bindingindex, divisor);
}
inline void vertex_array_element_buffer(GLuint vaobj, GLuint buffer)
{
	_impl::VertexArrayElementBuffer(vaobj, buffer);
}
inline void vertex_array_vertex_buffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)
{
	_impl::VertexArrayVertexBuffer(vaobj, bindingindex, buffer, offset, stride);
}
inline void vertex_array_vertex_buffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides)
{
	_impl::VertexArrayVertexBuffers(vaobj, first, count, buffers, offsets, strides);
}

} //namespace gl
} //namespace aw
#endif//aw_gl_ext_opengl_4_5_h
